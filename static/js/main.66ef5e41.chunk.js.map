{"version":3,"sources":["components/home/dropdownType.jsx","components/home/textEditor/autoPopulateSelect.jsx","components/home/textEditor/enclosingTagSelect.jsx","components/home/textEditor/textContentInput.jsx","components/home/textEditor/editableCheckbox.jsx","components/home/textEditor/maxLengthInput.jsx","components/home/textEditor/lengthDefaultInput.jsx","components/home/textEditor/pmTextInput.jsx","components/home/textEditor/preferMaxLengthCheckbox.jsx","components/home/textEditor/optionalCheckbox.jsx","components/home/textEditor/richTextCheckbox.jsx","components/home/textEditor/submitButton.jsx","components/home/textEditor/textEditor.jsx","components/home/linkEditor/linkEditor.jsx","components/home/imageEditor/imageEditor.jsx","components/home/tagDisplay.jsx","components/home/home.jsx","App.jsx","index.js"],"names":["DropdownType","className","DropdownButton","variant","id","title","Dropdown","Item","as","onClick","props","updateDropdownSelection","Component","AutoPopulateSelect","Form","Group","controlId","Label","Control","onChange","e","setAutoPopulateText","target","value","EnclosingTagSelect","event","setEnclosingTag","TextContentInput","setCustomText","type","placeholder","EditableCheckbox","Check","label","toggleEditable","MaxLengthInput","setMaxLengthValue","LengthDefaultInput","setLengthDefaultValue","PmTextInput","setPmText","PreferMaxLengthCheckbox","toggleMaxLength","OptionalCheckbox","toggleOptional","RichTextCheckbox","toggleRichText","SubmitButton","buildAutoPopulatedPmText","snippet","mainState","tagContent","autoPopulateText","buildManualPmText","pmText","buildLengthAttribute","preferMaxLengthOverDefault","maxLength","lengthDefault","buildOpeningTag","enclosingTag","isEditable","isOptional","hasRichText","buildFinalTag","tag","customText","updateFinalTag","Button","preventDefault","TextEditor","state","setState","newTag","newText","newValue","console","log","renderTextLengthFields","renderEditableFields","this","LinkEditor","ImageEditor","TagDisplay","finalTag","Home","dropdownSelection","newSelection","renderEditor","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66ef5e41.chunk.js","sourcesContent":["// Imports\nimport React, { Component } from 'react';\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\n\n\nclass DropdownType extends Component {\n    render() {\n        return (\n            <div className=\"dropdown\">\n                <DropdownButton variant=\"success\" id=\"dropdown-item-button\" title=\"PM Element\">\n                    <Dropdown.Item as=\"button\" onClick={() => { this.props.updateDropdownSelection(\"text\") }}>Text</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => { this.props.updateDropdownSelection(\"link\") }}>Link</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => { this.props.updateDropdownSelection(\"image\") }}>Image</Dropdown.Item>\n                </DropdownButton>\n            </div>\n        );\n    }\n}\nexport default DropdownType;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass AutoPopulateSelect extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"exampleForm.ControlSelect1\" className=\"editor-input-medium\">\n                <Form.Label>Auto-populate</Form.Label>\n                <Form.Control onChange={(e) => this.props.setAutoPopulateText(e.target.value)} as=\"select\" >\n                    <option>None</option>\n                    <option>Company Name</option>\n                    <option>Company Website</option>\n                    <option>Company Email</option>\n                    <option>Company Phone</option>\n                    <option>Company Address</option>\n                    <option>Value Proposition</option>\n                    <option>Link to LP</option>\n                </Form.Control>\n            </Form.Group>\n        )\n    }\n}\nexport default AutoPopulateSelect;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\n\nclass EnclosingTagSelect extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(event) => { this.props.setEnclosingTag(event.target.value) }} controlId=\"exampleForm.ControlSelect2\" className=\"editor-input-small\">\n                <Form.Label>Enclosing tag</Form.Label>\n                <Form.Control as=\"select\">\n                    <option>div</option>\n                    <option>p</option>\n                    <option>span</option>\n                </Form.Control>\n            </Form.Group>\n        )\n    }\n}\n\nexport default EnclosingTagSelect;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass TextContentInput extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"textContent\" className=\"editor-input-wide\">\n                <Form.Label>Text content</Form.Label>\n                <Form.Control onChange={(event) => { this.props.setCustomText(event.target.value) }} type=\"text\" placeholder=\"Enter the text which should be within the tag\" />\n            </Form.Group>\n        )\n    }\n}\n\nexport default TextContentInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass EditableCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"editableCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Editable\" onChange={() => {\n                    this.props.toggleEditable();\n                }} />\n            </Form.Group>\n        )\n    }\n}\n\nexport default EditableCheckbox;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass MaxLengthInput extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(e) => { this.props.setMaxLengthValue(e.target.value) }} controlId=\"maxLength\" className=\"editor-input-small\">\n                <Form.Label>Max length</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter\" />\n            </Form.Group>\n        )\n    }\n}\n\nexport default MaxLengthInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass LengthDefaultInput extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(e) => { this.props.setLengthDefaultValue(e.target.value) }} controlId=\"lengthDefault\" className=\"editor-input-small\">\n                <Form.Label>Length default</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter\" />\n            </Form.Group>\n        )\n    }\n}\n\nexport default LengthDefaultInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass PmTextInput extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(event) => { this.props.setPmText(event.target.value) }} controlId=\"pmText\" className=\"editor-input-medium\">\n                <Form.Label>PM-Text</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter the unique pm-text attribute\" />\n            </Form.Group>\n        )\n    }\n}\nexport default PmTextInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass PreferMaxLengthCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"maxLengthCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Use max-length\" onChange={() => {\n                    this.props.toggleMaxLength()\n                }} />\n            </Form.Group>\n        )\n    }\n}\nexport default PreferMaxLengthCheckbox;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass OptionalCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"optionalCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Optional\" onChange={() => {\n                    this.props.toggleOptional();\n                }} />\n            </Form.Group>\n        )\n    }\n}\n\nexport default OptionalCheckbox;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass RichTextCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"richTextCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Rich Text\" onChange={() => {\n                    this.props.toggleRichText();\n                }} />\n            </Form.Group>\n        )\n    }\n}\n\nexport default RichTextCheckbox;","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\n\nclass SubmitButton extends Component {\n\n    // Return a pm-text=\"\" tag with the relevant attribute value\n    buildAutoPopulatedPmText = () => {\n        let snippet = \" pm-text=\\\"\";\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Name\") {\n            snippet += \"companyname\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Website\") {\n            snippet += \"companyurl\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Email\") {\n            snippet += \"companyemail\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Phone\") {\n            snippet += \"companyphone\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Address\") {\n            snippet += \"companyaddress\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Value Proposition\") {\n            snippet += \"valueproposition\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Link to LP\") {\n            snippet += \"landingpage\"\n        }\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    // Return a pm-text=\"\" with the user-added attribute\n    buildManualPmText = () => {\n        let snippet = \" pm-text=\\\"\";\n        snippet += this.props.mainState.tagContent.pmText;\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    buildLengthAttribute = () => {\n        if (this.props.mainState.preferMaxLengthOverDefault) {\n            return (\n                \" max-length=\\\"\" +\n                this.props.mainState.tagContent.maxLength +\n                \"\\\"\"\n            )\n        }\n        return (\n            \" length-default=\\\"+\" +\n            this.props.mainState.tagContent.lengthDefault +\n            \"\\\"\"\n        )\n    }\n\n    // Build the opening tag and its relevant attributes\n    buildOpeningTag = () => {\n        let snippet = \"<\";\n        snippet += this.props.mainState.tagContent.enclosingTag;\n        // If the pm-text is set to Auto Populate\n        if (this.props.mainState.tagContent.autoPopulateText) {\n            snippet += this.buildAutoPopulatedPmText();\n        }\n        // If the pm-text is NOT set to Auto Populate\n        if (!this.props.mainState.tagContent.autoPopulateText && this.props.mainState.tagContent.pmText) {\n            snippet += this.buildManualPmText();\n        }\n        // Add the editable attribute (if applicable)\n        if (this.props.mainState.isEditable) {\n            snippet += \" editable=\\\"true\\\"\";\n        }\n        // Add the optional attribute (if applicable)\n        if (this.props.mainState.isOptional) {\n            snippet += \" optional=\\\"true\\\"\";\n        }\n        // Add the rich text attribute (if applicable)\n        if (this.props.mainState.hasRichText) {\n            snippet += \" rich-text=\\\"true\\\"\";\n        }\n        snippet += this.buildLengthAttribute();\n        snippet += \">\"\n        return snippet;\n    }\n\n    // Build the final tag\n    buildFinalTag = () => {\n        let tag = this.buildOpeningTag();\n\n        // Text content\n        if (this.props.mainState.tagContent.customText !== null) {\n            tag += this.props.mainState.tagContent.customText;\n        }\n        // Closing tag\n        tag += \"</\" + this.props.mainState.tagContent.enclosingTag + \">\";\n        this.props.updateFinalTag(tag);\n    }\n\n    render() {\n        return (\n            <Button onClick={(e) => {\n                e.preventDefault();\n                this.buildFinalTag();\n            }} variant=\"success\" type=\"submit\">\n                Generate\n            </Button>\n        )\n    }\n}\n\nexport default SubmitButton;","// Imports\nimport '../../../css/home/textEditor.css'\nimport React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\nimport AutoPopulateSelect from './autoPopulateSelect';\nimport EnclosingTagSelect from './enclosingTagSelect';\nimport TextContentInput from './textContentInput';\nimport EditableCheckbox from './editableCheckbox';\nimport MaxLengthInput from './maxLengthInput';\nimport LengthDefaultInput from './lengthDefaultInput';\nimport PmTextInput from './pmTextInput';\nimport PreferMaxLengthCheckbox from './preferMaxLengthCheckbox';\nimport OptionalCheckbox from './optionalCheckbox';\nimport RichTextCheckbox from './richTextCheckbox';\nimport SubmitButton from './submitButton';\n\nclass TextEditor extends Component {\n    state = {\n        isEditable: false,\n        isOptional: false,\n        hasRichText: false,\n        preferMaxLengthOverDefault: false,\n        tagContent: {\n            enclosingTag: \"div\",\n            autoPopulateText: null,\n            pmText: null,\n            customText: null,\n            maxLength: 0,\n            lengthDefault: 0,\n        },\n    }\n\n    // Toggle whether the user can insert 'max-length' or 'length-default'\n    toggleMaxLength = () => {\n        this.setState({ preferMaxLengthOverDefault: !this.state.preferMaxLengthOverDefault })\n    }\n\n    // Toggle whether the pm-tag is editable\n    toggleEditable = () => {\n        this.setState({ isEditable: !this.state.isEditable })\n    }\n\n    // Toggle whether the pm-tag is optional\n    toggleOptional = () => {\n        this.setState({ isOptional: !this.state.isOptional })\n    }\n\n    // Toggle whether the pm-tag has rich text\n    toggleRichText = () => {\n        this.setState({ hasRichText: !this.state.hasRichText })\n    }\n\n    // Change the element which encloses the text [p/div/span]\n    setEnclosingTag = (newTag) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.enclosingTag = newTag;\n        this.setState({ tagContent });\n    }\n\n    // Manually change the pm-text from the text input\n    setPmText = (newText) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.pmText = newText;\n        this.setState({ tagContent });\n    }\n\n    // Change the auto populated pm-text to the selection of the user\n    setAutoPopulateText = (newText) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.autoPopulateText = newText === \"None\" ? null : newText;\n        this.setState({ tagContent });\n    }\n\n    // Set the text content of the tag to the user input\n    setCustomText = (newText) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.customText = newText;\n        this.setState({ tagContent });\n    }\n\n    // Set the value of the attribute max-length\n    setMaxLengthValue = (newValue) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.maxLength = newValue;\n        this.setState({ tagContent });\n        console.log(newValue)\n    }\n\n    // Set the value of the attribute length-default\n    setLengthDefaultValue = (newValue) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.lengthDefault = newValue;\n        this.setState({ tagContent });\n        console.log(newValue)\n    }\n\n    // Render the max-length or the length-default based on the boolean preferMaxLengthOverDefault\n    renderTextLengthFields = () => {\n        if (this.state.preferMaxLengthOverDefault) {\n            return <MaxLengthInput setMaxLengthValue={this.setMaxLengthValue} />\n        }\n        else {\n            return <LengthDefaultInput setLengthDefaultValue={this.setLengthDefaultValue} />\n        }\n    }\n\n    // Render the editable properties of the PM tags based on the boolean isEditable\n    renderEditableFields = () => {\n        if (this.state.isEditable) {\n            return (\n                <span>\n                    <PmTextInput setPmText={this.setPmText} />\n                    <PreferMaxLengthCheckbox toggleMaxLength={this.toggleMaxLength} />\n                    {this.renderTextLengthFields()}\n                    <OptionalCheckbox toggleOptional={this.toggleOptional} />\n                    <RichTextCheckbox toggleRichText={this.toggleRichText} />\n                </span>\n            )\n        }\n    }\n\n\n\n    render() {\n        return (\n            <div id=\"div-textEditor\" >\n                <p className=\"editor-h1\">\n                    Text editor\n                </p>\n                <Form>\n                    <AutoPopulateSelect setAutoPopulateText={this.setAutoPopulateText} />\n                    <EnclosingTagSelect setEnclosingTag={this.setEnclosingTag} />\n                    <TextContentInput setCustomText={this.setCustomText} />\n                    <EditableCheckbox toggleEditable={this.toggleEditable} />\n                    {this.renderEditableFields()}\n                    <SubmitButton mainState={this.state} updateFinalTag={this.props.updateFinalTag} />\n                </Form>\n            </div>\n        )\n    }\n}\nexport default TextEditor;","// Imports\nimport React, { Component } from 'react';\nimport '../../../css/home/linkEditor.css'\n\n\nclass LinkEditor extends Component {\n    render() {\n        return (\n            <div id=\"div-linkEditor\">\n                <p className=\"editor-h1\">\n                    Link editor\n                </p>\n            </div>\n        )\n    }\n}\nexport default LinkEditor;","// Imports\nimport React, { Component } from 'react';\nimport '../../../css/home/imageEditor.css'\n\nclass ImageEditor extends Component {\n    render() {\n        return (\n            <div id=\"div-imageEditor\">\n                <p className=\"editor-h1\">\n                    Image editor\n                </p>\n            </div>\n        )\n    }\n}\nexport default ImageEditor;","// Imports\nimport React, { Component } from 'react';\nimport '../../css/home/tagDisplay.css'\n\nclass TagDisplay extends Component {\n\n    render() {\n        return (\n            <div id=\"div-tagDisplay\">\n                <p className=\"tagDisplay-h1\">\n                    Result\n                </p>\n                <p className=\"tagDisplay-result\">\n                    {this.props.mainState.finalTag}\n                </p>\n            </div>\n        )\n    }\n}\nexport default TagDisplay;","// Imports\nimport React, { Component } from 'react';\nimport DropdownType from './dropdownType';\nimport TextEditor from './textEditor/textEditor';\nimport LinkEditor from './linkEditor/linkEditor';\nimport ImageEditor from './imageEditor/imageEditor';\nimport TagDisplay from './tagDisplay';\nimport '../../css/home/home.css'\n\nclass Home extends Component {\n    state = {\n        dropdownSelection: \"text\",\n        finalTag: \"...\"\n    }\n    // Switch the currently open editor [Image/Text/Link]\n    updateDropdownSelection = (newSelection) => {\n        this.setState({\n            dropdownSelection: newSelection\n        })\n    }\n\n    // Update the final tag\n    updateFinalTag = (newTag) => {\n        this.setState({\n            finalTag: newTag\n        })\n    }\n\n    // Render the relevant editor based on the value of the dropdown menu at the top\n    renderEditor = () => {\n        if (this.state.dropdownSelection === \"text\") {\n            return <TextEditor updateFinalTag={this.updateFinalTag} />\n        }\n        if (this.state.dropdownSelection === \"link\") {\n            return <LinkEditor />\n        }\n        if (this.state.dropdownSelection === \"image\") {\n            return <ImageEditor />\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"div-home\">\n                <p id=\"topTitle\">PMK 0.1</p>\n                <DropdownType updateDropdownSelection={this.updateDropdownSelection}></DropdownType>\n                {this.renderEditor()}\n                <TagDisplay mainState={this.state} />\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Home from './components/home/home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}