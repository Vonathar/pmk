{"version":3,"sources":["components/home/leftDrawer.jsx","components/home/topMenu.jsx","components/home/textEditor/autoPopulateSelect.jsx","components/home/textEditor/enclosingTagSelect.jsx","components/home/textEditor/textContentInput.jsx","components/home/textEditor/editableCheckbox.jsx","components/home/textEditor/maxLengthInput.jsx","components/home/textEditor/lengthDefaultInput.jsx","components/home/textEditor/pmTextInput.jsx","components/home/textEditor/preferMaxLengthCheckbox.jsx","components/home/textEditor/optionalCheckbox.jsx","components/home/textEditor/richTextCheckbox.jsx","components/home/textEditor/submitButton.jsx","components/home/textEditor/textEditor.jsx","components/home/linkEditor/linkEditor.jsx","components/home/imageEditor/imageEditor.jsx","components/home/tagDisplay.jsx","components/home/home.jsx","App.jsx","index.js"],"names":["LeftDrawer","className","this","props","topMenuState","classes","list","role","onClick","toggleDrawer","List","ListItem","updateDropdownSelection","button","key","ListItemIcon","ListItemText","primary","Divider","Component","TopMenu","state","width","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","type","variant","style","flex","textAlign","SwipeableDrawer","open","mainState","isDrawerOpen","onClose","onOpen","AutoPopulateSelect","Form","Group","controlId","Label","Control","onChange","e","setAutoPopulateText","target","value","as","EnclosingTagSelect","event","setEnclosingTag","TextContentInput","setCustomText","placeholder","EditableCheckbox","Check","label","toggleEditable","MaxLengthInput","setMaxLengthValue","LengthDefaultInput","setLengthDefaultValue","PmTextInput","setPmText","PreferMaxLengthCheckbox","toggleMaxLength","OptionalCheckbox","toggleOptional","RichTextCheckbox","toggleRichText","SubmitButton","buildAutoPopulatedPmText","snippet","tagContent","autoPopulateText","buildManualPmText","pmText","buildLengthAttribute","preferMaxLengthOverDefault","maxLength","lengthDefault","buildOpeningTag","enclosingTag","isEditable","hasRichText","isOptional","buildFinalTag","tag","customText","updateFinalTag","Button","preventDefault","TextEditor","setState","newTag","newText","newValue","console","log","renderTextLengthFields","renderEditableFields","id","LinkEditor","ImageEditor","TagDisplay","finalTag","Home","dropdownSelection","newSelection","renderEditor","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8226bafd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport TextFields from '@material-ui/icons/TextFields'\nimport LinkIcon from '@material-ui/icons/Link'\nimport ImageIcon from '@material-ui/icons/Image';\nimport { List, Divider, ListItem, ListItemIcon, ListItemText } from '@material-ui/core'\n\n\nexport default class LeftDrawer extends Component {\n    render() {\n        return (\n            <div\n                className={this.props.topMenuState.classes.list}\n                role=\"presentation\"\n                onClick={this.props.toggleDrawer(false)}\n            >\n                <List>\n                    <ListItem onClick={() => this.props.updateDropdownSelection(\"text\")} button key=\"PM-Text\">\n                        <ListItemIcon>\n                            <TextFields />\n                        </ListItemIcon>\n                        <ListItemText primary=\"PM-Text\" />\n                    </ListItem>\n                    <ListItem onClick={() => this.props.updateDropdownSelection(\"link\")} button key=\"PM-Link\">\n                        <ListItemIcon>\n                            <LinkIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"PM-Link\" />\n                    </ListItem>\n                    <ListItem onClick={() => this.props.updateDropdownSelection(\"image\")} button key=\"Image editor\">\n                        <ListItemIcon>\n                            <ImageIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Image editor\" />\n                    </ListItem>\n                </List>\n                <Divider />\n                <List>\n                    <ListItem button key=\"Reserved for later\">\n                        <ListItemText primary=\"Reserved for later\" />\n                    </ListItem>\n                </List>\n            </div>\n        )\n    }\n}","// Imports\nimport React, { Component } from 'react';\nimport LeftDrawer from './leftDrawer'\nimport { AppBar, Toolbar, IconButton, Typography, SwipeableDrawer } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu';\n\n\nexport default class TopMenu extends Component {\n\n    state = {\n        // Object holding the required classNames\n        classes: {\n            list: {\n                width: 250,\n            },\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"dropdown\" >\n                <AppBar position=\"static\">\n                    <Toolbar >\n                        <IconButton onClick={this.props.toggleDrawer(true)} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography type=\"title\" variant=\"h6\" style={{ flex: 1, textAlign: \"left\" }} >\n                            PMK 0.1\n                        </Typography>\n                        <SwipeableDrawer\n                            open={this.props.mainState.isDrawerOpen}\n                            onClose={this.props.toggleDrawer(false)}\n                            onOpen={this.props.toggleDrawer(true)}\n                        >\n                            <LeftDrawer\n                                updateDropdownSelection={this.props.updateDropdownSelection}\n                                toggleDrawer={this.props.toggleDrawer}\n                                topMenuState={this.state} />\n                        </SwipeableDrawer>\n                    </Toolbar>\n\n                </AppBar>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass AutoPopulateSelect extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"exampleForm.ControlSelect1\" className=\"editor-input-medium\">\n                <Form.Label>Auto-populate</Form.Label>\n                <Form.Control onChange={(e) => this.props.setAutoPopulateText(e.target.value)} as=\"select\" >\n                    <option>None</option>\n                    <option>Company Name</option>\n                    <option>Company Website</option>\n                    <option>Company Email</option>\n                    <option>Company Phone</option>\n                    <option>Company Address</option>\n                    <option>Value Proposition</option>\n                    <option>Link to LP</option>\n                </Form.Control>\n            </Form.Group>\n        )\n    }\n}\nexport default AutoPopulateSelect;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\n\nclass EnclosingTagSelect extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(event) => { this.props.setEnclosingTag(event.target.value) }} controlId=\"exampleForm.ControlSelect2\" className=\"editor-input-small\">\n                <Form.Label>Enclosing tag</Form.Label>\n                <Form.Control as=\"select\">\n                    <option>div</option>\n                    <option>p</option>\n                    <option>span</option>\n                </Form.Control>\n            </Form.Group>\n        )\n    }\n}\n\nexport default EnclosingTagSelect;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass TextContentInput extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"textContent\" className=\"editor-input-wide\">\n                <Form.Label>Text content</Form.Label>\n                <Form.Control onChange={(event) => { this.props.setCustomText(event.target.value) }} type=\"text\" placeholder=\"Enter the text which should be within the tag\" />\n            </Form.Group>\n        )\n    }\n}\n\nexport default TextContentInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass EditableCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"editableCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Editable\" onChange={() => {\n                    this.props.toggleEditable();\n                }} />\n            </Form.Group>\n        )\n    }\n}\n\nexport default EditableCheckbox;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass MaxLengthInput extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(e) => { this.props.setMaxLengthValue(e.target.value) }} controlId=\"maxLength\" className=\"editor-input-small\">\n                <Form.Label>Max length</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter\" />\n            </Form.Group>\n        )\n    }\n}\n\nexport default MaxLengthInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass LengthDefaultInput extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(e) => { this.props.setLengthDefaultValue(e.target.value) }} controlId=\"lengthDefault\" className=\"editor-input-small\">\n                <Form.Label>Length default</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter\" />\n            </Form.Group>\n        )\n    }\n}\n\nexport default LengthDefaultInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass PmTextInput extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(event) => { this.props.setPmText(event.target.value) }} controlId=\"pmText\" className=\"editor-input-medium\">\n                <Form.Label>PM-Text</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter the unique pm-text attribute\" />\n            </Form.Group>\n        )\n    }\n}\nexport default PmTextInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass PreferMaxLengthCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"maxLengthCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Use max-length\" onChange={() => {\n                    this.props.toggleMaxLength()\n                }} />\n            </Form.Group>\n        )\n    }\n}\nexport default PreferMaxLengthCheckbox;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass OptionalCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"optionalCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Optional\" onChange={() => {\n                    this.props.toggleOptional();\n                }} />\n            </Form.Group>\n        )\n    }\n}\n\nexport default OptionalCheckbox;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass RichTextCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"richTextCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Rich Text\" onChange={() => {\n                    this.props.toggleRichText();\n                }} />\n            </Form.Group>\n        )\n    }\n}\n\nexport default RichTextCheckbox;","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nclass SubmitButton extends Component {\n\n    // Return a pm-text=\"\" tag with the relevant attribute value\n    buildAutoPopulatedPmText = () => {\n        let snippet = \" pm-text=\\\"\";\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Name\") {\n            snippet += \"companyname\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Website\") {\n            snippet += \"companyurl\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Email\") {\n            snippet += \"companyemail\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Phone\") {\n            snippet += \"companyphone\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Address\") {\n            snippet += \"companyaddress\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Value Proposition\") {\n            snippet += \"valueproposition\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Link to LP\") {\n            snippet += \"landingpage\"\n        }\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    // Return a pm-text=\"\" with the user-added attribute\n    buildManualPmText = () => {\n        let snippet = \" pm-text=\\\"\";\n        snippet += this.props.mainState.tagContent.pmText;\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    buildLengthAttribute = () => {\n        if (this.props.mainState.preferMaxLengthOverDefault) {\n            return (\n                \" max-length=\\\"\" +\n                this.props.mainState.tagContent.maxLength +\n                \"\\\"\"\n            )\n        }\n        return (\n            \" length-default=\\\"+\" +\n            this.props.mainState.tagContent.lengthDefault +\n            \"\\\"\"\n        )\n    }\n\n    // Build the opening tag and its relevant attributes\n    buildOpeningTag = () => {\n        let snippet = \"<\";\n        snippet += this.props.mainState.tagContent.enclosingTag;\n        // If the pm-text is set to Auto Populate\n        if (this.props.mainState.tagContent.autoPopulateText) {\n            snippet += this.buildAutoPopulatedPmText();\n        }\n        // If the pm-text is NOT set to Auto Populate\n        if (!this.props.mainState.tagContent.autoPopulateText && this.props.mainState.tagContent.pmText) {\n            snippet += this.buildManualPmText();\n        }\n        // Add the editable attribute (if applicable)\n        if (this.props.mainState.isEditable) {\n            snippet += \" editable=\\\"true\\\"\";\n            // Add the rich text attribute (if applicable)\n            if (this.props.mainState.hasRichText) {\n                snippet += \" rich-text=\\\"true\\\"\";\n            }\n            snippet += this.buildLengthAttribute();\n        }\n        // Add the optional attribute (if applicable)\n        if (this.props.mainState.isOptional) {\n            snippet += \" optional=\\\"true\\\"\";\n        }\n        snippet += \">\"\n        return snippet;\n    }\n\n    // Build the final tag\n    buildFinalTag = () => {\n        let tag = this.buildOpeningTag();\n\n        // Text content\n        if (this.props.mainState.tagContent.customText !== null) {\n            tag += this.props.mainState.tagContent.customText;\n        }\n        // Closing tag\n        tag += \"</\" + this.props.mainState.tagContent.enclosingTag + \">\";\n        this.props.updateFinalTag(tag);\n    }\n\n    render() {\n        return (\n            <Button onClick={(e) => {\n                e.preventDefault();\n                this.buildFinalTag();\n            }} variant=\"contained\" color=\"primary\" type=\"submit\">\n                Generate\n            </Button>\n        )\n    }\n}\n\nexport default SubmitButton;","// Imports\nimport '../../../css/home/textEditor.css'\nimport React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\nimport AutoPopulateSelect from './autoPopulateSelect';\nimport EnclosingTagSelect from './enclosingTagSelect';\nimport TextContentInput from './textContentInput';\nimport EditableCheckbox from './editableCheckbox';\nimport MaxLengthInput from './maxLengthInput';\nimport LengthDefaultInput from './lengthDefaultInput';\nimport PmTextInput from './pmTextInput';\nimport PreferMaxLengthCheckbox from './preferMaxLengthCheckbox';\nimport OptionalCheckbox from './optionalCheckbox';\nimport RichTextCheckbox from './richTextCheckbox';\nimport SubmitButton from './submitButton';\n\nclass TextEditor extends Component {\n    state = {\n        isEditable: false,\n        isOptional: false,\n        hasRichText: false,\n        preferMaxLengthOverDefault: false,\n        tagContent: {\n            enclosingTag: \"div\",\n            autoPopulateText: null,\n            pmText: null,\n            customText: null,\n            maxLength: 0,\n            lengthDefault: 0,\n        },\n    }\n\n    // Toggle whether the user can insert 'max-length' or 'length-default'\n    toggleMaxLength = () => {\n        this.setState({ preferMaxLengthOverDefault: !this.state.preferMaxLengthOverDefault })\n    }\n\n    // Toggle whether the pm-tag is editable\n    toggleEditable = () => {\n        this.setState({ isEditable: !this.state.isEditable })\n    }\n\n    // Toggle whether the pm-tag is optional\n    toggleOptional = () => {\n        this.setState({ isOptional: !this.state.isOptional })\n    }\n\n    // Toggle whether the pm-tag has rich text\n    toggleRichText = () => {\n        this.setState({ hasRichText: !this.state.hasRichText })\n    }\n\n    // Change the element which encloses the text [p/div/span]\n    setEnclosingTag = (newTag) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.enclosingTag = newTag;\n        this.setState({ tagContent });\n    }\n\n    // Manually change the pm-text from the text input\n    setPmText = (newText) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.pmText = newText;\n        this.setState({ tagContent });\n    }\n\n    // Change the auto populated pm-text to the selection of the user\n    setAutoPopulateText = (newText) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.autoPopulateText = newText === \"None\" ? null : newText;\n        this.setState({ tagContent });\n    }\n\n    // Set the text content of the tag to the user input\n    setCustomText = (newText) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.customText = newText;\n        this.setState({ tagContent });\n    }\n\n    // Set the value of the attribute max-length\n    setMaxLengthValue = (newValue) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.maxLength = newValue;\n        this.setState({ tagContent });\n        console.log(newValue)\n    }\n\n    // Set the value of the attribute length-default\n    setLengthDefaultValue = (newValue) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.lengthDefault = newValue;\n        this.setState({ tagContent });\n        console.log(newValue)\n    }\n\n    // Render the max-length or the length-default based on the boolean preferMaxLengthOverDefault\n    renderTextLengthFields = () => {\n        if (this.state.preferMaxLengthOverDefault) {\n            return <MaxLengthInput setMaxLengthValue={this.setMaxLengthValue} />\n        }\n        else {\n            return <LengthDefaultInput setLengthDefaultValue={this.setLengthDefaultValue} />\n        }\n    }\n\n    // Render the editable properties of the PM tags based on the boolean isEditable\n    renderEditableFields = () => {\n        if (this.state.isEditable) {\n            return (\n                <span>\n                    <PmTextInput setPmText={this.setPmText} />\n                    <PreferMaxLengthCheckbox toggleMaxLength={this.toggleMaxLength} />\n                    {this.renderTextLengthFields()}\n                    <OptionalCheckbox toggleOptional={this.toggleOptional} />\n                    <RichTextCheckbox toggleRichText={this.toggleRichText} />\n                </span>\n            )\n        }\n    }\n\n\n\n    render() {\n        return (\n            <div id=\"div-textEditor\" >\n                <p className=\"editor-h1\">\n                    Text editor\n                </p>\n                <Form>\n                    <AutoPopulateSelect setAutoPopulateText={this.setAutoPopulateText} />\n                    <EnclosingTagSelect setEnclosingTag={this.setEnclosingTag} />\n                    <TextContentInput setCustomText={this.setCustomText} />\n                    <EditableCheckbox toggleEditable={this.toggleEditable} />\n                    {this.renderEditableFields()}\n                    <SubmitButton mainState={this.state} updateFinalTag={this.props.updateFinalTag} />\n                </Form>\n            </div>\n        )\n    }\n}\nexport default TextEditor;","// Imports\nimport React, { Component } from 'react';\nimport '../../../css/home/linkEditor.css'\n\n\nclass LinkEditor extends Component {\n    render() {\n        return (\n            <div id=\"div-linkEditor\">\n                <p className=\"editor-h1\">\n                    Link editor\n                </p>\n            </div>\n        )\n    }\n}\nexport default LinkEditor;","// Imports\nimport React, { Component } from 'react';\nimport '../../../css/home/imageEditor.css'\n\nclass ImageEditor extends Component {\n    render() {\n        return (\n            <div id=\"div-imageEditor\">\n                <p className=\"editor-h1\">\n                    Image editor\n                </p>\n            </div>\n        )\n    }\n}\nexport default ImageEditor;","// Imports\nimport React, { Component } from 'react';\nimport '../../css/home/tagDisplay.css'\n\nclass TagDisplay extends Component {\n\n    render() {\n        return (\n            <div id=\"div-tagDisplay\">\n                <p className=\"tagDisplay-h1\">\n                    Result\n                </p>\n                <p className=\"tagDisplay-result\">\n                    {this.props.mainState.finalTag}\n                </p>\n            </div>\n        )\n    }\n}\nexport default TagDisplay;","// Imports\nimport React, { Component } from 'react';\nimport DropdownType from './topMenu';\nimport TextEditor from './textEditor/textEditor';\nimport LinkEditor from './linkEditor/linkEditor';\nimport ImageEditor from './imageEditor/imageEditor';\nimport TagDisplay from './tagDisplay';\nimport '../../css/home/home.css'\n\nclass Home extends Component {\n    state = {\n        isDrawerOpen: false,\n        dropdownSelection: \"text\",\n        finalTag: \"...\"\n    }\n\n    // Open or close the drawer\n    toggleDrawer = (open) => event => {\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n        this.setState({ isDrawerOpen: open })\n    }\n\n    // Switch the currently open editor [Image/Text/Link]\n    updateDropdownSelection = (newSelection) => {\n        this.setState({\n            dropdownSelection: newSelection\n        })\n    }\n\n    // Update the final tag\n    updateFinalTag = (newTag) => {\n        this.setState({\n            finalTag: newTag\n        })\n    }\n\n    // Render the relevant editor based on the value of the dropdown menu at the top\n    renderEditor = () => {\n        if (this.state.dropdownSelection === \"text\") {\n            return <TextEditor updateFinalTag={this.updateFinalTag} />\n        }\n        if (this.state.dropdownSelection === \"link\") {\n            return <LinkEditor />\n        }\n        if (this.state.dropdownSelection === \"image\") {\n            return <ImageEditor />\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"div-home\">\n                <DropdownType updateDropdownSelection={this.updateDropdownSelection} mainState={this.state} toggleDrawer={this.toggleDrawer}></DropdownType>\n                {this.renderEditor()}\n                <TagDisplay mainState={this.state} />\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Home from './components/home/home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}