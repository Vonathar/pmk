{"version":3,"sources":["components/home/featureBubble.jsx","components/home/featuresMenu.jsx","components/home/home.jsx","components/common/leftDrawer.jsx","components/common/topMenu.jsx","components/common/checkbox.jsx","components/common/textInput.jsx","components/common/selectInput.jsx","components/tagEditor/textEditor/submitButton.jsx","components/tagEditor/textEditor/textEditor.jsx","components/tagEditor/linkEditor/submitButton.jsx","components/tagEditor/linkEditor/linkEditor.jsx","components/tagEditor/imageEditor/submitButton.jsx","components/tagEditor/imageEditor/imageEditor.jsx","components/tagEditor/tagDisplay.jsx","components/tagEditor/tagEditor.jsx","components/common/leftDrawerLink.jsx","App.jsx","index.js"],"names":["FeatureBubble","Card","className","CardContent","Typography","gutterBottom","variant","component","this","props","title","color","desc","CardActions","to","linkPath","Button","size","Component","FeaturesMenu","id","Home","LeftDrawer","role","onClick","toggleDrawer","links","map","link","String","Divider","List","TopMenu","AppBar","position","Toolbar","IconButton","edge","aria-label","type","style","flex","textAlign","SwipeableDrawer","open","mainState","isDrawerOpen","onClose","onOpen","updateDropdownSelection","Checkbox","Form","Group","controlId","parameterName","Check","label","displayName","onChange","toggleStateBoolean","TextInput","renderSizeClass","Label","Control","event","changeTagContentState","target","value","placeholder","SelectInput","e","as","options","SubmitButton","buildAutoPopulatedPmText","snippet","tagContent","autoPopulateText","buildManualPmText","pmText","buildLengthAttribute","preferMaxLengthOverDefault","maxLength","lengthDefault","buildOpeningTag","enclosingTag","isEditable","hasRichText","isOptional","buildFinalTag","tag","customText","updateFinalTag","preventDefault","TextEditor","state","booleanName","setState","newValue","renderTextLengthFields","renderEditableFields","buildAutoPopulatedPmLink","buildPmLink","pmLink","console","log","isTextEditable","isLinkEditable","LinkEditor","renderMaxLengthInput","buildAutoPopulatedImage","autoPopulateImage","isSwappable","isUploadable","isToggle","ImageEditor","TagDisplay","finalTag","newTag","renderEditor","openEditor","LeftDrawerLink","linkTo","ListItem","button","key","linkName","onClickHandler","ListItemIcon","linkIcon","linkSize","ListItemText","primary","secondary","App","updateDrawerLinks","arrayOfLinks","exact","path","render","ReactDOM","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.64dffeef.chunk.js","sourcesContent":["import '../../css/home/featureBubble.css'\nimport { Link } from 'react-router-dom'\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button'\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport React, { Component } from 'react';\n\nexport default class FeatureBubble extends Component {\n    render() {\n        return (\n            <Card className=\"featureBubble-card\">\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {this.props.title}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {this.props.desc}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Link to={this.props.linkPath}>\n                        <Button size=\"small\" color=\"primary\">\n                            Open\n                    </Button>\n                    </Link>\n                </CardActions>\n            </Card>\n        );\n    }\n}","import '../../css/home/featuresMenu.css'\nimport FeatureBubble from './featureBubble'\nimport React, { Component } from 'react';\n\nexport default class FeaturesMenu extends Component {\n    render() {\n        return (\n            <div id=\"featuresMenu-div\">\n                <FeatureBubble title=\"PM Tag Editor\" desc=\"Dynamically generate pm-ready tags for use in any project. Available for text, images and links.\" linkPath=\"/editor\" />\n            </div>\n        )\n    }\n}","import '../../css/home/home.css'\nimport FeaturesMenu from './featuresMenu'\nimport React, { Component } from 'react';\n\nexport default class Home extends Component {\n\n    render() {\n        return (\n            <div id=\"home-div\">\n                <FeaturesMenu />\n            </div>\n        )\n    }\n}","import '../../css/tagEditor/leftDrawer.css';\nimport React, { Component } from 'react';\nimport { List, Divider } from '@material-ui/core'\n\n\nexport default class LeftDrawer extends Component {\n    render() {\n        return (\n            <div\n                className=\"leftDrawer-div\"\n                role=\"presentation\"\n                onClick={this.props.toggleDrawer(false)}\n            >\n                {this.props.links.map((link) => {\n                    return typeof link === 'string' || link instanceof String\n                        ? <Divider />\n                        : <List>{link}</List>\n                })}\n\n            </div>\n        )\n    }\n}","// Imports\nimport React, { Component } from 'react';\nimport LeftDrawer from './leftDrawer'\nimport { AppBar, Toolbar, IconButton, Typography, SwipeableDrawer } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu';\n\n\nexport default class TopMenu extends Component {\n\n\n    render() {\n        return (\n            <div className=\"dropdown\" >\n                <AppBar position=\"static\">\n                    <Toolbar >\n                        <IconButton onClick={this.props.toggleDrawer(true)} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography type=\"title\" variant=\"h6\" style={{ flex: 1, textAlign: \"left\" }} >\n                            PMK 0.1\n                        </Typography>\n                        <SwipeableDrawer\n                            open={this.props.mainState.isDrawerOpen}\n                            onClose={this.props.toggleDrawer(false)}\n                            onOpen={this.props.toggleDrawer(true)}\n                        >\n                            <LeftDrawer\n                                updateDropdownSelection={this.props.updateDropdownSelection}\n                                toggleDrawer={this.props.toggleDrawer}\n                                links={this.props.links} />\n                        </SwipeableDrawer>\n                    </Toolbar>\n\n                </AppBar>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\n\nexport default class Checkbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId={this.props.parameterName}>\n                <Form.Check type=\"checkbox\" label={this.props.displayName} onChange={() => {\n                    this.props.toggleStateBoolean(this.props.parameterName);\n                }} />\n            </Form.Group>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nexport default class TextInput extends Component {\n\n    renderSizeClass = () => {\n        return \"editor-input-\" + this.props.size;\n    }\n\n    render() {\n        return (\n            <Form.Group controlId={this.props.parameterName} className={this.renderSizeClass()}>\n                <Form.Label>{this.props.displayName}</Form.Label>\n                <Form.Control onChange={(event) => { this.props.changeTagContentState(event.target.value, this.props.parameterName) }} type=\"text\" placeholder={this.props.placeholder} />\n            </Form.Group>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nexport default class SelectInput extends Component {\n\n    renderSizeClass = () => {\n        return \"editor-input-\" + this.props.size;\n    }\n\n    render() {\n        return (\n            <Form.Group controlId={this.props.parameterName} className={this.renderSizeClass()}>\n                <Form.Label>{this.props.displayName}</Form.Label>\n                <Form.Control onChange={(e) => this.props.changeTagContentState(e.target.value, this.props.parameterName)} as=\"select\" >\n                    {this.props.options.map((value) => {\n                        return <option>{value}</option>\n                    })}\n                </Form.Control>\n            </Form.Group>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nclass SubmitButton extends Component {\n\n    // Return a pm-text=\"\" tag with the relevant attribute value\n    buildAutoPopulatedPmText = () => {\n        let snippet = \" pm-text=\\\"\";\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Name\") {\n            snippet += \"companyname\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Website\") {\n            snippet += \"companyurl\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Email\") {\n            snippet += \"companyemail\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Phone\") {\n            snippet += \"companyphone\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Address\") {\n            snippet += \"companyaddress\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Value Proposition\") {\n            snippet += \"valueproposition\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Link to LP\") {\n            snippet += \"landingpage\"\n        }\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    // Return a pm-text=\"\" with the user-added attribute\n    buildManualPmText = () => {\n        let snippet = \" pm-text=\\\"\";\n        snippet += this.props.mainState.tagContent.pmText;\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    buildLengthAttribute = () => {\n        if (this.props.mainState.preferMaxLengthOverDefault) {\n            return (\n                \" max-length=\\\"\" +\n                this.props.mainState.tagContent.maxLength +\n                \"\\\"\"\n            )\n        }\n        return (\n            \" length-default=\\\"+\" +\n            this.props.mainState.tagContent.lengthDefault +\n            \"\\\"\"\n        )\n    }\n\n    // Build the opening tag and its relevant attributes\n    buildOpeningTag = () => {\n        let snippet = \"<\";\n        snippet += this.props.mainState.tagContent.enclosingTag;\n        // If the pm-text is set to Auto Populate\n        if (this.props.mainState.tagContent.autoPopulateText) {\n            snippet += this.buildAutoPopulatedPmText();\n        }\n        // If the pm-text is NOT set to Auto Populate\n        if (!this.props.mainState.tagContent.autoPopulateText && this.props.mainState.tagContent.pmText) {\n            snippet += this.buildManualPmText();\n        }\n        // Add the editable attribute (if applicable)\n        if (this.props.mainState.isEditable) {\n            snippet += \" editable=\\\"true\\\"\";\n            // Add the rich text attribute (if applicable)\n            if (this.props.mainState.hasRichText) {\n                snippet += \" rich-text=\\\"true\\\"\";\n            }\n            snippet += this.buildLengthAttribute();\n        }\n        // Add the optional attribute (if applicable)\n        if (this.props.mainState.isOptional) {\n            snippet += \" optional=\\\"true\\\"\";\n        }\n        snippet += \">\"\n        return snippet;\n    }\n\n    // Build the final tag\n    buildFinalTag = () => {\n        let tag = this.buildOpeningTag();\n\n        // Text content\n        if (this.props.mainState.tagContent.customText !== null) {\n            tag += this.props.mainState.tagContent.customText;\n        }\n        // Closing tag\n        tag += \"</\" + this.props.mainState.tagContent.enclosingTag + \">\";\n        this.props.updateFinalTag(tag);\n    }\n\n    render() {\n        return (\n            <Button onClick={(e) => {\n                e.preventDefault();\n                this.buildFinalTag();\n            }} variant=\"contained\" color=\"primary\" type=\"submit\">\n                Generate\n            </Button>\n        )\n    }\n}\n\nexport default SubmitButton;","// Imports\nimport '../../../css/tagEditor/textEditor.css'\nimport React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\nimport Checkbox from '../../common/checkbox';\nimport TextInput from '../../common/textInput';\nimport SelectInput from '../../common/selectInput'\nimport SubmitButton from './submitButton';\n\nclass TextEditor extends Component {\n    state = {\n        isEditable: false,\n        isOptional: false,\n        hasRichText: false,\n        preferMaxLengthOverDefault: false,\n        tagContent: {\n            enclosingTag: \"div\",\n            autoPopulateText: null,\n            pmText: null,\n            customText: null,\n            maxLength: 0,\n            lengthDefault: 0,\n        },\n    }\n\n    // Invert the boolean value of a given state property\n    // Accepts one single formal parameter, which is the parameter identifier\n    toggleStateBoolean = (booleanName) => {\n        this.setState({ [booleanName]: !this.state[booleanName] })\n    }\n\n    // Change the value of a given property that's present in the state\n    // Accepts two formal parameters: (1) the new value and (2) the unique property identifier\n    changeTagContentState = (newValue, parameterName) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent[parameterName] = newValue;\n        this.setState({ tagContent });\n    }\n\n    // Render the max-length or the length-default based on the boolean preferMaxLengthOverDefault\n    renderTextLengthFields = () => {\n        return (this.state.preferMaxLengthOverDefault)\n            ? <TextInput changeTagContentState={this.changeTagContentState} parameterName=\"maxLength\" displayName=\"Max length\" size=\"small\" placeholder=\"Enter\" />\n            : <TextInput changeTagContentState={this.changeTagContentState} parameterName=\"lengthDefault\" displayName=\"Length default\" size=\"small\" placeholder=\"Enter\" />\n    }\n\n    // Render the editable properties of the PM tags based on the boolean isEditable\n    renderEditableFields = () => {\n        if (this.state.isEditable) {\n            return (\n                <span>\n                    <TextInput changeTagContentState={this.changeTagContentState} parameterName=\"pmText\" displayName=\"PM-Text\" size=\"medium\" placeholder=\"Enter the unique pm-text attribute\" />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"preferMaxLengthOverDefault\" displayName=\"Use max-length\" />\n                    {this.renderTextLengthFields()}\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"isOptional\" displayName=\"Optional\" />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"hasRichText\" displayName=\"Rich text\" />\n                </span>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"div-textEditor\" >\n                <p className=\"editor-h1\">\n                    Text editor\n                </p>\n                <Form>\n                    <SelectInput changeTagContentState={this.changeTagContentState} parameterName=\"autoPopulateText\" displayName=\"Auto-populate\" size=\"medium\" options={[\"None\", \"Company Name\", \"Company Website\", \"Company Email\", \"Company Phone\", \"Company Address\", \"Value Proposition\", \"Link to LP\"]} />\n                    <SelectInput changeTagContentState={this.changeTagContentState} parameterName=\"enclosingTag\" displayName=\"Enclosing tag\" size=\"small\" options={[\"div\", \"p\", \"span\"]} />\n                    <TextInput changeTagContentState={this.changeTagContentState} parameterName=\"customText\" displayName=\"Text content\" size=\"wide\" placeholder=\"Enter the text which should be within the tag\" />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"isEditable\" displayName=\"Editable\" />\n                    {this.renderEditableFields()}\n                    <SubmitButton mainState={this.state} updateFinalTag={this.props.updateFinalTag} />\n                </Form>\n            </div>\n        )\n    }\n}\nexport default TextEditor;","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nclass SubmitButton extends Component {\n\n    // Return a pm-text=\"\" tag with the relevant attribute value\n    buildAutoPopulatedPmLink = () => {\n        let snippet = \"\";\n        if (this.props.mainState.tagContent.autoPopulateText === \"Landing page\") {\n            snippet += \" pm-link-default-url=\\\"global_companyurl\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Privacy policy\") {\n            snippet += \" pm-link-default-url=\\\"privacy_policy\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company email\") {\n            snippet += \" pm-link-default-email=\\\"global_companyemail\"\n        }\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    // Return a pm-text=\"\" with the user-added attribute\n    buildPmLink = () => {\n        let snippet = \" pm-link=\\\"\";\n        if (this.props.mainState.tagContent.autoPopulateText === \"Privacy policy\") {\n            snippet += \"privacy_policy\"\n        } else {\n            snippet += this.props.mainState.tagContent.pmLink;\n            snippet += \"\\\"\"\n        }\n        console.log(this.props.mainState.tagContent.pmLink)\n        return snippet;\n    }\n\n    buildLengthAttribute = () => {\n        return (\n            \" max-length=\\\"\" +\n            this.props.mainState.tagContent.maxLength +\n            \"\\\"\"\n        )\n    }\n\n    // Build the opening tag and its relevant attributes\n    buildOpeningTag = () => {\n        let snippet = \"<a\";\n        // If the pm-text is set to Auto Populate\n        if (this.props.mainState.tagContent.autoPopulateText) {\n            snippet += this.buildAutoPopulatedPmLink();\n        }\n        // If the pm-text is NOT set to Auto Populate\n        if (!this.props.mainState.tagContent.autoPopulateText && this.props.mainState.tagContent.pmLink) {\n            snippet += this.buildPmLink();\n        }\n        // Add the editable attribute (if applicable)\n        if (this.props.mainState.isTextEditable) {\n            snippet += \" text-editable=\\\"true\\\"\";\n            snippet += this.buildLengthAttribute();\n        }\n        // Add the link-editable attribute (if applicable)\n        if (this.props.mainState.isLinkEditable) {\n            snippet += \" link-editable=\\\"true\\\"\";\n        }\n\n        // Add the optional attribute (if applicable)\n        if (this.props.mainState.isOptional) {\n            snippet += \" optional=\\\"true\\\"\";\n        }\n        snippet += \">\"\n        return snippet;\n    }\n\n    // Build the final tag\n    buildFinalTag = () => {\n        let tag = this.buildOpeningTag();\n\n        // Text content\n        if (this.props.mainState.tagContent.customText !== null) {\n            tag += this.props.mainState.tagContent.customText;\n        }\n        // Closing tag\n        tag += \"</a>\";\n        this.props.updateFinalTag(tag);\n    }\n\n    render() {\n        return (\n            <Button onClick={(e) => {\n                e.preventDefault();\n                this.buildFinalTag();\n            }} variant=\"contained\" color=\"primary\" type=\"submit\">\n                Generate\n            </Button>\n        )\n    }\n}\n\nexport default SubmitButton;","// Imports\nimport React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\nimport SubmitButton from './submitButton';\nimport Checkbox from '../../common/checkbox';\nimport TextInput from '../../common/textInput';\nimport SelectInput from '../../common/selectInput'\nimport '../../../css/tagEditor/linkEditor.css';\n\n\nclass LinkEditor extends Component {\n\n    state = {\n        isEditable: false,\n        isOptional: false,\n        isLinkEditable: false,\n        isTextEditable: false,\n        tagContent: {\n            autoPopulateText: null,\n            pmLink: null,\n            customText: null,\n            maxLength: 0,\n        },\n    }\n\n    // Invert the boolean value of a given state property\n    // Accepts one single formal parameter, which is the parameter identifier\n    toggleStateBoolean = (booleanName) => {\n        this.setState({ [booleanName]: !this.state[booleanName] })\n    }\n\n    // Change the value of a given property that's present in the state\n    // Accepts two formal parameters: (1) the new value and (2) the unique property identifier\n    changeTagContentState = (newValue, parameterName) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent[parameterName] = newValue;\n        this.setState({ tagContent });\n    }\n\n    // Render the editable properties of the PM tags based on the boolean isEditable\n    renderEditableFields = () => {\n        if (this.state.isEditable) {\n            return (\n                <span>\n                    <TextInput changeTagContentState={this.changeTagContentState} parameterName=\"pmLink\" displayName=\"PM-Link\" size=\"wide\" placeholder=\"Enter the unique pm-link attribute\" />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"isOptional\" displayName=\"Optional\" />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"isLinkEditable\" displayName=\"Link editable\" />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"isTextEditable\" displayName=\"Text editable\" />\n                    {this.renderMaxLengthInput()}\n                </span>\n            )\n        }\n    }\n\n    // Render the max-length editor if the TEXT is editable\n    renderMaxLengthInput = () => {\n        if (this.state.isTextEditable) {\n            return <TextInput changeTagContentState={this.changeTagContentState} parameterName=\"maxLength\" displayName=\"Max length\" size=\"small\" placeholder=\"Enter\" />\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"div-linkEditor\">\n                <p className=\"editor-h1\">\n                    Link editor\n                </p>\n                <Form>\n                    <SelectInput changeTagContentState={this.changeTagContentState} parameterName=\"autoPopulateText\" displayName=\"Auto-populate\" size=\"medium\" options={[\"None\", \"Landing page\", \"Privacy policy\", \"Company email\"]} />\n                    <TextInput changeTagContentState={this.changeTagContentState} parameterName=\"customText\" displayName=\"Text content\" size=\"wide\" placeholder=\"Enter the text which should be within the tag\" />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"isEditable\" displayName=\"Editable\" />\n                    {this.renderEditableFields()}\n                    <SubmitButton updateFinalTag={this.props.updateFinalTag} mainState={this.state} />\n                </Form>\n            </div>\n        )\n    }\n}\nexport default LinkEditor;\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nclass SubmitButton extends Component {\n\n    // Return a pm-image=\"\" tag with the relevant attribute value\n    buildAutoPopulatedImage = () => {\n        let snippet = \" pm-image=\\\"\";\n        if (this.props.mainState.tagContent.autoPopulateImage === \"Partner logo\") {\n            snippet += \"partner.logo\"\n        }\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n\n    // Build the opening tag and its relevant attributes\n    buildOpeningTag = () => {\n        let snippet = \"<img\";\n        // If the pm-text is set to Auto Populate\n        if (this.props.mainState.tagContent.autoPopulateImage) {\n            snippet += this.buildAutoPopulatedImage();\n        }\n        // Add the optional attribute (if applicable)\n        if (this.props.mainState.isOptional) {\n            snippet += \" optional=\\\"true\\\"\";\n        }\n        // Add the swappable attribute (if applicable)\n        if (this.props.mainState.isSwappable) {\n            snippet += \" swappable=\\\"true\\\"\";\n        }\n        // Add the uploadable attribute (if applicable)\n        if (this.props.mainState.isUploadable) {\n            snippet += \" uploadable=\\\"true\\\"\";\n        }\n        // Add the uploadable attribute (if applicable)\n        if (this.props.mainState.isToggle) {\n            snippet += \" toggle=\\\"insert-toggle-name\\\"\";\n        }\n        return snippet;\n    }\n\n    // Build the final tag\n    buildFinalTag = () => {\n        let tag = this.buildOpeningTag();\n\n        // Closing tag\n        tag += \" />\";\n        this.props.updateFinalTag(tag);\n    }\n\n    render() {\n        return (\n            <Button onClick={(e) => {\n                e.preventDefault();\n                this.buildFinalTag();\n            }} variant=\"contained\" color=\"primary\" type=\"submit\">\n                Generate\n            </Button>\n        )\n    }\n}\n\nexport default SubmitButton;","// Imports\nimport React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\nimport Checkbox from '../../common/checkbox';\nimport SelectInput from '../../common/selectInput'\nimport SubmitButton from './submitButton'\n\nimport '../../../css/tagEditor/imageEditor.css'\n\nclass ImageEditor extends Component {\n    state = {\n        isSwappable: false,\n        isUploadable: false,\n        isOptional: false,\n        isToggle: false,\n        tagContent: {\n            autoPopulateImage: \"None\"\n        }\n    }\n\n    // Invert the boolean value of a given state property\n    // Accepts one single formal parameter, which is the parameter identifier\n    toggleStateBoolean = (booleanName) => {\n        this.setState({ [booleanName]: !this.state[booleanName] })\n    }\n\n    // Change the value of a given property that's present in the state\n    // Accepts two formal parameters: (1) the new value and (2) the unique property identifier\n    changeTagContentState = (newValue, parameterName) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent[parameterName] = newValue;\n        this.setState({ tagContent });\n    }\n\n    render() {\n        return (\n            <div id=\"div-imageEditor\" >\n                <p className=\"editor-h1\">\n                    Image editor\n                </p>\n                <Form>\n                    <SelectInput changeTagContentState={this.changeTagContentState} parameterName=\"autoPopulateImage\" displayName=\"Auto-populate\" size=\"medium\" options={[\"None\", \"Partner logo\"]} />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"isSwappable\" displayName=\"Swappable\" />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"isUploadable\" displayName=\"Uploadable\" />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"isToggle\" displayName=\"Toggle\" />\n                    <Checkbox toggleStateBoolean={this.toggleStateBoolean} parameterName=\"isOptional\" displayName=\"Optional\" />\n                    <SubmitButton mainState={this.state} updateFinalTag={this.props.updateFinalTag} />\n                </Form>\n            </div>\n        )\n    }\n}\nexport default ImageEditor;\n\n","// Imports\nimport React, { Component } from 'react';\nimport '../../css/tagEditor/tagDisplay.css'\n\nclass TagDisplay extends Component {\n\n    render() {\n        return (\n            <div id=\"div-tagDisplay\">\n                <p className=\"tagDisplay-h1\">\n                    Result\n                </p>\n                <p className=\"tagDisplay-result\">\n                    {this.props.mainState.finalTag}\n                </p>\n            </div>\n        )\n    }\n}\nexport default TagDisplay;","// Imports\nimport React, { Component } from 'react';\nimport TextEditor from './textEditor/textEditor';\nimport LinkEditor from './linkEditor/linkEditor';\nimport ImageEditor from './imageEditor/imageEditor';\nimport TagDisplay from './tagDisplay';\nimport '../../css/tagEditor/tagEditor.css'\n\nclass Home extends Component {\n    state = {\n        isDrawerOpen: false,\n        finalTag: \"...\"\n    }\n\n    // Update the final tag\n    updateFinalTag = (newTag) => {\n        this.setState({\n            finalTag: newTag\n        })\n    }\n\n    // Render the relevant editor based on the value of the dropdown menu at the top\n    renderEditor = () => {\n        if (this.props.openEditor === \"text\") {\n            return <TextEditor updateFinalTag={this.updateFinalTag} />\n        }\n        if (this.props.openEditor === \"link\") {\n            return <LinkEditor updateFinalTag={this.updateFinalTag} />\n        }\n        if (this.props.openEditor === \"image\") {\n            return <ImageEditor updateFinalTag={this.updateFinalTag} />\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"div-tagEditor\">\n                {this.renderEditor()}\n                <TagDisplay mainState={this.state} />\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ListItem, ListItemIcon, ListItemText } from '@material-ui/core'\n\nexport default class LeftDrawerLink extends Component {\n    render() {\n        return (\n            <Link to={this.props.linkTo}>\n                <ListItem button key={this.props.linkName} onClick={this.props.onClickHandler}>\n                    <ListItemIcon>\n                        {this.props.linkIcon}\n                    </ListItemIcon>\n                    {this.props.linkSize === \"primary\"\n                        ? <ListItemText primary={this.props.linkName} />\n                        : <ListItemText secondary={this.props.linkName} />}\n                </ListItem>\n            </Link>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Home from './components/home/home'\nimport TopMenu from './components/common/topMenu'\nimport TagEditor from './components/tagEditor/tagEditor'\nimport { Switch, Route } from 'react-router-dom';\nimport TextFieldsIcon from '@material-ui/icons/TextFields'\nimport HomeIcon from '@material-ui/icons/Home';\nimport ImageIcon from '@material-ui/icons/Image'\nimport LinkIcon from '@material-ui/icons/Link'\nimport LeftDrawerLink from './components/common/leftDrawerLink';\n\n\nclass App extends Component {\n\n  state = {\n    isDrawerOpen: false,\n    openEditor: \"text\",\n    links: [\n      <LeftDrawerLink linkIcon={<HomeIcon />} linkName=\"Home\" linkSize=\"primary\" linkTo=\"/\" />,\n      \"Divider\",\n      <LeftDrawerLink linkIcon={<TextFieldsIcon />} linkName=\"Text editor\" linkSize=\"secondary\" linkTo=\"/editor\" onClickHandler={() => { this.setState({ openEditor: \"text\" }) }} />,\n      <LeftDrawerLink linkIcon={< LinkIcon />} linkName=\"Link editor\" linkSize=\"secondary\" linkTo=\"/editor\" onClickHandler={() => { this.setState({ openEditor: \"link\" }) }} />,\n      < LeftDrawerLink linkIcon={< ImageIcon />} linkName=\"Image editor\" linkSize=\"secondary\" linkTo=\"/editor\" onClickHandler={() => { this.setState({ openEditor: \"image\" }) }} />,\n    ]\n  }\n\n  // Open or close the drawer\n  toggleDrawer = (open) => event => {\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    this.setState({ isDrawerOpen: open })\n  }\n\n  updateDrawerLinks = (arrayOfLinks) => {\n    let links = [...this.state.links];\n    links = arrayOfLinks;\n    this.setState({ links });\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <TopMenu mainState={this.state} toggleDrawer={this.toggleDrawer} links={this.state.links} />\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/editor' render={() => <TagEditor openEditor={this.state.openEditor} />} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport {\n    BrowserRouter,\n} from 'react-router-dom';\n\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL} >\n    <App />\n</BrowserRouter>,\n    document.getElementById('root'));"],"sourceRoot":""}