{"version":3,"sources":["components/home/featureBubble.jsx","components/home/featuresMenu.jsx","components/home/home.jsx","components/common/leftDrawer.jsx","components/common/topMenu.jsx","components/common/checkbox.jsx","components/common/textInput.jsx","components/common/selectInput.jsx","components/tagEditor/textEditor/submitButton.jsx","components/tagEditor/textEditor/textEditor.jsx","components/tagEditor/linkEditor/submitButton.jsx","components/tagEditor/linkEditor/linkEditor.jsx","components/tagEditor/imageEditor/submitButton.jsx","components/tagEditor/imageEditor/imageEditor.jsx","components/tagEditor/tagDisplay.jsx","components/tagEditor/tagEditor.jsx","components/common/leftDrawerLink.jsx","App.jsx","index.js"],"names":["FeatureBubble","Card","className","CardContent","Typography","gutterBottom","variant","component","this","props","title","color","desc","CardActions","to","linkPath","Button","size","Component","FeaturesMenu","id","Home","LeftDrawer","role","onClick","toggleDrawer","links","map","link","String","Divider","List","TopMenu","AppBar","position","Toolbar","IconButton","edge","aria-label","type","style","flex","textAlign","SwipeableDrawer","open","mainState","isDrawerOpen","onClose","onOpen","updateDropdownSelection","Checkbox","Form","Group","controlId","parameterName","Check","label","displayName","onChange","toggleStateBoolean","TextInput","renderSizeClass","Label","Control","event","changeTagContentState","target","value","placeholder","SelectInput","e","as","options","SubmitButton","buildAutoPopulatedPmText","snippet","tagContent","autoPopulateText","buildManualPmText","pmText","buildLengthAttribute","preferMaxLengthOverDefault","maxLength","lengthDefault","buildOpeningTag","enclosingTag","isEditable","hasRichText","isOptional","buildFinalTag","tag","customText","updateFinalTag","preventDefault","TextEditor","state","booleanName","setState","newValue","renderTextLengthFields","renderEditableFields","class","buildAutoPopulatedPmLink","buildPmLink","pmLink","console","log","isTextEditable","isLinkEditable","LinkEditor","renderMaxLengthInput","buildAutoPopulatedImage","autoPopulateImage","isSwappable","isUploadable","isToggle","ImageEditor","TagDisplay","finalTag","newTag","renderEditor","openEditor","LeftDrawerLink","linkTo","ListItem","button","key","linkName","onClickHandler","ListItemIcon","linkIcon","linkSize","ListItemText","primary","secondary","App","updateDrawerLinks","arrayOfLinks","exact","path","render","ReactDOM","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.2ef57a91.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React, { Component } from \"react\";\n\nexport default class FeatureBubble extends Component {\n  render() {\n    return (\n      <Card className=\"featureBubble-card\">\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {this.props.title}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {this.props.desc}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Link to={this.props.linkPath}>\n            <Button size=\"small\" color=\"primary\">\n              Open\n            </Button>\n          </Link>\n        </CardActions>\n      </Card>\n    );\n  }\n}\n","import FeatureBubble from \"./featureBubble\";\nimport React, { Component } from \"react\";\n\nexport default class FeaturesMenu extends Component {\n  render() {\n    return (\n      <div id=\"featuresMenu-div\">\n        <FeatureBubble\n          title=\"PM Tag Editor\"\n          desc=\"Dynamically generate pm-ready tags for use in any project. Available for text, images and links.\"\n          linkPath=\"/editor\"\n        />\n      </div>\n    );\n  }\n}\n","import FeaturesMenu from \"./featuresMenu\";\nimport React, { Component } from \"react\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div id=\"home-div\">\n        <FeaturesMenu />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { List, Divider } from \"@material-ui/core\";\n\nexport default class LeftDrawer extends Component {\n  render() {\n    return (\n      <div\n        id=\"leftDrawer-div\"\n        role=\"presentation\"\n        onClick={this.props.toggleDrawer(false)}\n      >\n        {this.props.links.map(link => {\n          return typeof link === \"string\" || link instanceof String ? (\n            <Divider />\n          ) : (\n            <List>{link}</List>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","// Imports\nimport React, { Component } from \"react\";\nimport LeftDrawer from \"./leftDrawer\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  SwipeableDrawer\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nexport default class TopMenu extends Component {\n  render() {\n    return (\n      <div className=\"dropdown\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton\n              onClick={this.props.toggleDrawer(true)}\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"menu\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              type=\"title\"\n              variant=\"h6\"\n              style={{ flex: 1, textAlign: \"left\" }}\n            >\n              PMK 0.1\n            </Typography>\n            <SwipeableDrawer\n              open={this.props.mainState.isDrawerOpen}\n              onClose={this.props.toggleDrawer(false)}\n              onOpen={this.props.toggleDrawer(true)}\n            >\n              <LeftDrawer\n                updateDropdownSelection={this.props.updateDropdownSelection}\n                toggleDrawer={this.props.toggleDrawer}\n                links={this.props.links}\n              />\n            </SwipeableDrawer>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\n\nexport default class Checkbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId={this.props.parameterName}>\n                <Form.Check type=\"checkbox\" label={this.props.displayName} onChange={() => {\n                    this.props.toggleStateBoolean(this.props.parameterName);\n                }} />\n            </Form.Group>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nexport default class TextInput extends Component {\n\n    renderSizeClass = () => {\n        return \"editor-input-\" + this.props.size;\n    }\n\n    render() {\n        return (\n            <Form.Group controlId={this.props.parameterName} className={this.renderSizeClass()}>\n                <Form.Label>{this.props.displayName}</Form.Label>\n                <Form.Control onChange={(event) => { this.props.changeTagContentState(event.target.value, this.props.parameterName) }} type=\"text\" placeholder={this.props.placeholder} />\n            </Form.Group>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nexport default class SelectInput extends Component {\n\n    renderSizeClass = () => {\n        return \"editor-input-\" + this.props.size;\n    }\n\n    render() {\n        return (\n            <Form.Group controlId={this.props.parameterName} className={this.renderSizeClass()}>\n                <Form.Label>{this.props.displayName}</Form.Label>\n                <Form.Control onChange={(e) => this.props.changeTagContentState(e.target.value, this.props.parameterName)} as=\"select\" >\n                    {this.props.options.map((value) => {\n                        return <option>{value}</option>\n                    })}\n                </Form.Control>\n            </Form.Group>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nclass SubmitButton extends Component {\n\n    // Return a pm-text=\"\" tag with the relevant attribute value\n    buildAutoPopulatedPmText = () => {\n        let snippet = \" pm-text=\\\"\";\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Name\") {\n            snippet += \"companyname\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Website\") {\n            snippet += \"companyurl\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Email\") {\n            snippet += \"companyemail\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Phone\") {\n            snippet += \"companyphone\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Address\") {\n            snippet += \"companyaddress\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Value Proposition\") {\n            snippet += \"valueproposition\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Link to LP\") {\n            snippet += \"landingpage\"\n        }\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    // Return a pm-text=\"\" with the user-added attribute\n    buildManualPmText = () => {\n        let snippet = \" pm-text=\\\"\";\n        snippet += this.props.mainState.tagContent.pmText;\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    buildLengthAttribute = () => {\n        if (this.props.mainState.preferMaxLengthOverDefault) {\n            return (\n                \" max-length=\\\"\" +\n                this.props.mainState.tagContent.maxLength +\n                \"\\\"\"\n            )\n        }\n        return (\n            \" length-default=\\\"+\" +\n            this.props.mainState.tagContent.lengthDefault +\n            \"\\\"\"\n        )\n    }\n\n    // Build the opening tag and its relevant attributes\n    buildOpeningTag = () => {\n        let snippet = \"<\";\n        snippet += this.props.mainState.tagContent.enclosingTag;\n        // If the pm-text is set to Auto Populate\n        if (this.props.mainState.tagContent.autoPopulateText) {\n            snippet += this.buildAutoPopulatedPmText();\n        }\n        // If the pm-text is NOT set to Auto Populate\n        if (!this.props.mainState.tagContent.autoPopulateText && this.props.mainState.tagContent.pmText) {\n            snippet += this.buildManualPmText();\n        }\n        // Add the editable attribute (if applicable)\n        if (this.props.mainState.isEditable) {\n            snippet += \" editable=\\\"true\\\"\";\n            // Add the rich text attribute (if applicable)\n            if (this.props.mainState.hasRichText) {\n                snippet += \" rich-text=\\\"true\\\"\";\n            }\n            snippet += this.buildLengthAttribute();\n        }\n        // Add the optional attribute (if applicable)\n        if (this.props.mainState.isOptional) {\n            snippet += \" optional=\\\"true\\\"\";\n        }\n        snippet += \">\"\n        return snippet;\n    }\n\n    // Build the final tag\n    buildFinalTag = () => {\n        let tag = this.buildOpeningTag();\n\n        // Text content\n        if (this.props.mainState.tagContent.customText !== null) {\n            tag += this.props.mainState.tagContent.customText;\n        }\n        // Closing tag\n        tag += \"</\" + this.props.mainState.tagContent.enclosingTag + \">\";\n        this.props.updateFinalTag(tag);\n    }\n\n    render() {\n        return (\n            <Button onClick={(e) => {\n                e.preventDefault();\n                this.buildFinalTag();\n            }} variant=\"contained\" color=\"primary\" type=\"submit\">\n                Generate\n            </Button>\n        )\n    }\n}\n\nexport default SubmitButton;","// Imports\nimport React, { Component } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Checkbox from \"../../common/checkbox\";\nimport TextInput from \"../../common/textInput\";\nimport SelectInput from \"../../common/selectInput\";\nimport SubmitButton from \"./submitButton\";\n\nclass TextEditor extends Component {\n  state = {\n    isEditable: false,\n    isOptional: false,\n    hasRichText: false,\n    preferMaxLengthOverDefault: false,\n    tagContent: {\n      enclosingTag: \"div\",\n      autoPopulateText: null,\n      pmText: null,\n      customText: null,\n      maxLength: 0,\n      lengthDefault: 0\n    }\n  };\n\n  // Invert the boolean value of a given state property\n  // Accepts one single formal parameter, which is the parameter identifier\n  toggleStateBoolean = booleanName => {\n    this.setState({ [booleanName]: !this.state[booleanName] });\n  };\n\n  // Change the value of a given property that's present in the state\n  // Accepts two formal parameters: (1) the new value and (2) the unique property identifier\n  changeTagContentState = (newValue, parameterName) => {\n    let tagContent = { ...this.state.tagContent };\n    tagContent[parameterName] = newValue;\n    this.setState({ tagContent });\n  };\n\n  // Render the max-length or the length-default based on the boolean preferMaxLengthOverDefault\n  renderTextLengthFields = () => {\n    return this.state.preferMaxLengthOverDefault ? (\n      <TextInput\n        changeTagContentState={this.changeTagContentState}\n        parameterName=\"maxLength\"\n        displayName=\"Max length\"\n        size=\"small\"\n        placeholder=\"Enter\"\n      />\n    ) : (\n      <TextInput\n        changeTagContentState={this.changeTagContentState}\n        parameterName=\"lengthDefault\"\n        displayName=\"Length default\"\n        size=\"small\"\n        placeholder=\"Enter\"\n      />\n    );\n  };\n\n  // Render the editable properties of the PM tags based on the boolean isEditable\n  renderEditableFields = () => {\n    if (this.state.isEditable) {\n      return (\n        <span>\n          <TextInput\n            changeTagContentState={this.changeTagContentState}\n            parameterName=\"pmText\"\n            displayName=\"PM-Text\"\n            size=\"medium\"\n            placeholder=\"Enter the unique pm-text attribute\"\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"preferMaxLengthOverDefault\"\n            displayName=\"Use max-length\"\n          />\n          {this.renderTextLengthFields()}\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"isOptional\"\n            displayName=\"Optional\"\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"hasRichText\"\n            displayName=\"Rich text\"\n          />\n        </span>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div class=\"editorWindow\">\n        <p className=\"editor-h1\">Text editor</p>\n        <Form>\n          <SelectInput\n            changeTagContentState={this.changeTagContentState}\n            parameterName=\"autoPopulateText\"\n            displayName=\"Auto-populate\"\n            size=\"medium\"\n            options={[\n              \"None\",\n              \"Company Name\",\n              \"Company Website\",\n              \"Company Email\",\n              \"Company Phone\",\n              \"Company Address\",\n              \"Value Proposition\",\n              \"Link to LP\"\n            ]}\n          />\n          <SelectInput\n            changeTagContentState={this.changeTagContentState}\n            parameterName=\"enclosingTag\"\n            displayName=\"Enclosing tag\"\n            size=\"small\"\n            options={[\"div\", \"p\", \"span\"]}\n          />\n          <TextInput\n            changeTagContentState={this.changeTagContentState}\n            parameterName=\"customText\"\n            displayName=\"Text content\"\n            size=\"wide\"\n            placeholder=\"Enter the text which should be within the tag\"\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"isEditable\"\n            displayName=\"Editable\"\n          />\n          {this.renderEditableFields()}\n          <SubmitButton\n            mainState={this.state}\n            updateFinalTag={this.props.updateFinalTag}\n          />\n        </Form>\n      </div>\n    );\n  }\n}\nexport default TextEditor;\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nclass SubmitButton extends Component {\n\n    // Return a pm-text=\"\" tag with the relevant attribute value\n    buildAutoPopulatedPmLink = () => {\n        let snippet = \"\";\n        if (this.props.mainState.tagContent.autoPopulateText === \"Landing page\") {\n            snippet += \" pm-link-default-url=\\\"global_companyurl\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Privacy policy\") {\n            snippet += \" pm-link-default-url=\\\"privacy_policy\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company email\") {\n            snippet += \" pm-link-default-email=\\\"global_companyemail\"\n        }\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    // Return a pm-text=\"\" with the user-added attribute\n    buildPmLink = () => {\n        let snippet = \" pm-link=\\\"\";\n        if (this.props.mainState.tagContent.autoPopulateText === \"Privacy policy\") {\n            snippet += \"privacy_policy\"\n        } else {\n            snippet += this.props.mainState.tagContent.pmLink;\n            snippet += \"\\\"\"\n        }\n        console.log(this.props.mainState.tagContent.pmLink)\n        return snippet;\n    }\n\n    buildLengthAttribute = () => {\n        return (\n            \" max-length=\\\"\" +\n            this.props.mainState.tagContent.maxLength +\n            \"\\\"\"\n        )\n    }\n\n    // Build the opening tag and its relevant attributes\n    buildOpeningTag = () => {\n        let snippet = \"<a\";\n        // If the pm-text is set to Auto Populate\n        if (this.props.mainState.tagContent.autoPopulateText) {\n            snippet += this.buildAutoPopulatedPmLink();\n        }\n        // If the pm-text is NOT set to Auto Populate\n        if (!this.props.mainState.tagContent.autoPopulateText && this.props.mainState.tagContent.pmLink) {\n            snippet += this.buildPmLink();\n        }\n        // Add the editable attribute (if applicable)\n        if (this.props.mainState.isTextEditable) {\n            snippet += \" text-editable=\\\"true\\\"\";\n            snippet += this.buildLengthAttribute();\n        }\n        // Add the link-editable attribute (if applicable)\n        if (this.props.mainState.isLinkEditable) {\n            snippet += \" link-editable=\\\"true\\\"\";\n        }\n\n        // Add the optional attribute (if applicable)\n        if (this.props.mainState.isOptional) {\n            snippet += \" optional=\\\"true\\\"\";\n        }\n        snippet += \">\"\n        return snippet;\n    }\n\n    // Build the final tag\n    buildFinalTag = () => {\n        let tag = this.buildOpeningTag();\n\n        // Text content\n        if (this.props.mainState.tagContent.customText !== null) {\n            tag += this.props.mainState.tagContent.customText;\n        }\n        // Closing tag\n        tag += \"</a>\";\n        this.props.updateFinalTag(tag);\n    }\n\n    render() {\n        return (\n            <Button onClick={(e) => {\n                e.preventDefault();\n                this.buildFinalTag();\n            }} variant=\"contained\" color=\"primary\" type=\"submit\">\n                Generate\n            </Button>\n        )\n    }\n}\n\nexport default SubmitButton;","// Imports\nimport React, { Component } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport SubmitButton from \"./submitButton\";\nimport Checkbox from \"../../common/checkbox\";\nimport TextInput from \"../../common/textInput\";\nimport SelectInput from \"../../common/selectInput\";\n\nclass LinkEditor extends Component {\n  state = {\n    isEditable: false,\n    isOptional: false,\n    isLinkEditable: false,\n    isTextEditable: false,\n    tagContent: {\n      autoPopulateText: null,\n      pmLink: null,\n      customText: null,\n      maxLength: 0\n    }\n  };\n\n  // Invert the boolean value of a given state property\n  // Accepts one single formal parameter, which is the parameter identifier\n  toggleStateBoolean = booleanName => {\n    this.setState({ [booleanName]: !this.state[booleanName] });\n  };\n\n  // Change the value of a given property that's present in the state\n  // Accepts two formal parameters: (1) the new value and (2) the unique property identifier\n  changeTagContentState = (newValue, parameterName) => {\n    let tagContent = { ...this.state.tagContent };\n    tagContent[parameterName] = newValue;\n    this.setState({ tagContent });\n  };\n\n  // Render the editable properties of the PM tags based on the boolean isEditable\n  renderEditableFields = () => {\n    if (this.state.isEditable) {\n      return (\n        <span>\n          <TextInput\n            changeTagContentState={this.changeTagContentState}\n            parameterName=\"pmLink\"\n            displayName=\"PM-Link\"\n            size=\"wide\"\n            placeholder=\"Enter the unique pm-link attribute\"\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"isOptional\"\n            displayName=\"Optional\"\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"isLinkEditable\"\n            displayName=\"Link editable\"\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"isTextEditable\"\n            displayName=\"Text editable\"\n          />\n          {this.renderMaxLengthInput()}\n        </span>\n      );\n    }\n  };\n\n  // Render the max-length editor if the TEXT is editable\n  renderMaxLengthInput = () => {\n    if (this.state.isTextEditable) {\n      return (\n        <TextInput\n          changeTagContentState={this.changeTagContentState}\n          parameterName=\"maxLength\"\n          displayName=\"Max length\"\n          size=\"small\"\n          placeholder=\"Enter\"\n        />\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div class=\"editorWindow\">\n        <p className=\"editor-h1\">Link editor</p>\n        <Form>\n          <SelectInput\n            changeTagContentState={this.changeTagContentState}\n            parameterName=\"autoPopulateText\"\n            displayName=\"Auto-populate\"\n            size=\"medium\"\n            options={[\n              \"None\",\n              \"Landing page\",\n              \"Privacy policy\",\n              \"Company email\"\n            ]}\n          />\n          <TextInput\n            changeTagContentState={this.changeTagContentState}\n            parameterName=\"customText\"\n            displayName=\"Text content\"\n            size=\"wide\"\n            placeholder=\"Enter the text which should be within the tag\"\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"isEditable\"\n            displayName=\"Editable\"\n          />\n          {this.renderEditableFields()}\n          <SubmitButton\n            updateFinalTag={this.props.updateFinalTag}\n            mainState={this.state}\n          />\n        </Form>\n      </div>\n    );\n  }\n}\nexport default LinkEditor;\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nclass SubmitButton extends Component {\n\n    // Return a pm-image=\"\" tag with the relevant attribute value\n    buildAutoPopulatedImage = () => {\n        let snippet = \" pm-image=\\\"\";\n        if (this.props.mainState.tagContent.autoPopulateImage === \"Partner logo\") {\n            snippet += \"partner.logo\"\n        }\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n\n    // Build the opening tag and its relevant attributes\n    buildOpeningTag = () => {\n        let snippet = \"<img\";\n        // If the pm-text is set to Auto Populate\n        if (this.props.mainState.tagContent.autoPopulateImage) {\n            snippet += this.buildAutoPopulatedImage();\n        }\n        // Add the optional attribute (if applicable)\n        if (this.props.mainState.isOptional) {\n            snippet += \" optional=\\\"true\\\"\";\n        }\n        // Add the swappable attribute (if applicable)\n        if (this.props.mainState.isSwappable) {\n            snippet += \" swappable=\\\"true\\\"\";\n        }\n        // Add the uploadable attribute (if applicable)\n        if (this.props.mainState.isUploadable) {\n            snippet += \" uploadable=\\\"true\\\"\";\n        }\n        // Add the uploadable attribute (if applicable)\n        if (this.props.mainState.isToggle) {\n            snippet += \" toggle=\\\"insert-toggle-name\\\"\";\n        }\n        return snippet;\n    }\n\n    // Build the final tag\n    buildFinalTag = () => {\n        let tag = this.buildOpeningTag();\n\n        // Closing tag\n        tag += \" />\";\n        this.props.updateFinalTag(tag);\n    }\n\n    render() {\n        return (\n            <Button onClick={(e) => {\n                e.preventDefault();\n                this.buildFinalTag();\n            }} variant=\"contained\" color=\"primary\" type=\"submit\">\n                Generate\n            </Button>\n        )\n    }\n}\n\nexport default SubmitButton;","// Imports\nimport React, { Component } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Checkbox from \"../../common/checkbox\";\nimport SelectInput from \"../../common/selectInput\";\nimport SubmitButton from \"./submitButton\";\n\nclass ImageEditor extends Component {\n  state = {\n    isSwappable: false,\n    isUploadable: false,\n    isOptional: false,\n    isToggle: false,\n    tagContent: {\n      autoPopulateImage: \"None\"\n    }\n  };\n\n  // Invert the boolean value of a given state property\n  // Accepts one single formal parameter, which is the parameter identifier\n  toggleStateBoolean = booleanName => {\n    this.setState({ [booleanName]: !this.state[booleanName] });\n  };\n\n  // Change the value of a given property that's present in the state\n  // Accepts two formal parameters: (1) the new value and (2) the unique property identifier\n  changeTagContentState = (newValue, parameterName) => {\n    let tagContent = { ...this.state.tagContent };\n    tagContent[parameterName] = newValue;\n    this.setState({ tagContent });\n  };\n\n  render() {\n    return (\n      <div class=\"editorWindow\">\n        <p className=\"editor-h1\">Image editor</p>\n        <Form>\n          <SelectInput\n            changeTagContentState={this.changeTagContentState}\n            parameterName=\"autoPopulateImage\"\n            displayName=\"Auto-populate\"\n            size=\"medium\"\n            options={[\"None\", \"Partner logo\"]}\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"isSwappable\"\n            displayName=\"Swappable\"\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"isUploadable\"\n            displayName=\"Uploadable\"\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"isToggle\"\n            displayName=\"Toggle\"\n          />\n          <Checkbox\n            toggleStateBoolean={this.toggleStateBoolean}\n            parameterName=\"isOptional\"\n            displayName=\"Optional\"\n          />\n          <SubmitButton\n            mainState={this.state}\n            updateFinalTag={this.props.updateFinalTag}\n          />\n        </Form>\n      </div>\n    );\n  }\n}\nexport default ImageEditor;\n","// Imports\nimport React, { Component } from \"react\";\n\nclass TagDisplay extends Component {\n  render() {\n    return (\n      <div id=\"div-tagDisplay\">\n        <p className=\"tagDisplay-h1\">Result</p>\n        <p className=\"tagDisplay-result\">{this.props.mainState.finalTag}</p>\n      </div>\n    );\n  }\n}\nexport default TagDisplay;\n","// Imports\nimport React, { Component } from \"react\";\nimport TextEditor from \"./textEditor/textEditor\";\nimport LinkEditor from \"./linkEditor/linkEditor\";\nimport ImageEditor from \"./imageEditor/imageEditor\";\nimport TagDisplay from \"./tagDisplay\";\n\nclass Home extends Component {\n  state = {\n    isDrawerOpen: false,\n    finalTag: \"...\"\n  };\n\n  // Update the final tag\n  updateFinalTag = newTag => {\n    this.setState({\n      finalTag: newTag\n    });\n  };\n\n  // Render the relevant editor based on the value of the dropdown menu at the top\n  renderEditor = () => {\n    if (this.props.openEditor === \"text\") {\n      return <TextEditor updateFinalTag={this.updateFinalTag} />;\n    }\n    if (this.props.openEditor === \"link\") {\n      return <LinkEditor updateFinalTag={this.updateFinalTag} />;\n    }\n    if (this.props.openEditor === \"image\") {\n      return <ImageEditor updateFinalTag={this.updateFinalTag} />;\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"div-tagEditor\">\n        {this.renderEditor()}\n        <TagDisplay mainState={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ListItem, ListItemIcon, ListItemText } from '@material-ui/core'\n\nexport default class LeftDrawerLink extends Component {\n    render() {\n        return (\n            <Link to={this.props.linkTo}>\n                <ListItem button key={this.props.linkName} onClick={this.props.onClickHandler}>\n                    <ListItemIcon>\n                        {this.props.linkIcon}\n                    </ListItemIcon>\n                    {this.props.linkSize === \"primary\"\n                        ? <ListItemText primary={this.props.linkName} />\n                        : <ListItemText secondary={this.props.linkName} />}\n                </ListItem>\n            </Link>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport Home from \"./components/home/home\";\nimport TopMenu from \"./components/common/topMenu\";\nimport TagEditor from \"./components/tagEditor/tagEditor\";\nimport { Switch, Route } from \"react-router-dom\";\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport LinkIcon from \"@material-ui/icons/Link\";\nimport LeftDrawerLink from \"./components/common/leftDrawerLink\";\nimport \"./scss/app.scss\";\n\nclass App extends Component {\n  state = {\n    isDrawerOpen: false,\n    openEditor: \"text\",\n    links: [\n      <LeftDrawerLink\n        linkIcon={<HomeIcon />}\n        linkName=\"Home\"\n        linkSize=\"primary\"\n        linkTo=\"/\"\n      />,\n      \"Divider\",\n      <LeftDrawerLink\n        linkIcon={<TextFieldsIcon />}\n        linkName=\"Text editor\"\n        linkSize=\"secondary\"\n        linkTo=\"/editor\"\n        onClickHandler={() => {\n          this.setState({ openEditor: \"text\" });\n        }}\n      />,\n      <LeftDrawerLink\n        linkIcon={<LinkIcon />}\n        linkName=\"Link editor\"\n        linkSize=\"secondary\"\n        linkTo=\"/editor\"\n        onClickHandler={() => {\n          this.setState({ openEditor: \"link\" });\n        }}\n      />,\n      <LeftDrawerLink\n        linkIcon={<ImageIcon />}\n        linkName=\"Image editor\"\n        linkSize=\"secondary\"\n        linkTo=\"/editor\"\n        onClickHandler={() => {\n          this.setState({ openEditor: \"image\" });\n        }}\n      />\n    ]\n  };\n\n  // Open or close the drawer\n  toggleDrawer = open => event => {\n    if (\n      event &&\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n    this.setState({ isDrawerOpen: open });\n  };\n\n  updateDrawerLinks = arrayOfLinks => {\n    let links = [...this.state.links];\n    links = arrayOfLinks;\n    this.setState({ links });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TopMenu\n          mainState={this.state}\n          toggleDrawer={this.toggleDrawer}\n          links={this.state.links}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route\n            path=\"/editor\"\n            render={() => <TagEditor openEditor={this.state.openEditor} />}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}