{"version":3,"sources":["components/home/featureBubble.jsx","components/home/featuresMenu.jsx","components/home/home.jsx","components/tagEditor/leftDrawer.jsx","components/tagEditor/topMenu.jsx","components/tagEditor/textEditor/autoPopulateSelect.jsx","components/tagEditor/textEditor/enclosingTagSelect.jsx","components/tagEditor/textEditor/textContentInput.jsx","components/tagEditor/textEditor/editableCheckbox.jsx","components/tagEditor/textEditor/maxLengthInput.jsx","components/tagEditor/textEditor/lengthDefaultInput.jsx","components/tagEditor/textEditor/pmTextInput.jsx","components/tagEditor/textEditor/preferMaxLengthCheckbox.jsx","components/tagEditor/textEditor/optionalCheckbox.jsx","components/tagEditor/textEditor/richTextCheckbox.jsx","components/tagEditor/textEditor/submitButton.jsx","components/tagEditor/textEditor/textEditor.jsx","components/tagEditor/linkEditor/linkEditor.jsx","components/tagEditor/imageEditor/imageEditor.jsx","components/tagEditor/tagDisplay.jsx","components/tagEditor/tagEditor.jsx","App.jsx","index.js"],"names":["FeatureBubble","Card","className","CardContent","Typography","gutterBottom","variant","component","this","props","title","color","desc","CardActions","to","linkPath","Button","size","Component","FeaturesMenu","id","Home","LeftDrawer","role","onClick","toggleDrawer","List","ListItem","button","key","ListItemIcon","ListItemText","primary","Divider","updateDropdownSelection","TopMenu","AppBar","position","Toolbar","IconButton","edge","aria-label","type","style","flex","textAlign","SwipeableDrawer","open","mainState","isDrawerOpen","onClose","onOpen","topMenuState","state","AutoPopulateSelect","Form","Group","controlId","Label","Control","onChange","e","setAutoPopulateText","target","value","as","EnclosingTagSelect","event","setEnclosingTag","TextContentInput","setCustomText","placeholder","EditableCheckbox","Check","label","toggleEditable","MaxLengthInput","setMaxLengthValue","LengthDefaultInput","setLengthDefaultValue","PmTextInput","setPmText","PreferMaxLengthCheckbox","toggleMaxLength","OptionalCheckbox","toggleOptional","RichTextCheckbox","toggleRichText","SubmitButton","buildAutoPopulatedPmText","snippet","tagContent","autoPopulateText","buildManualPmText","pmText","buildLengthAttribute","preferMaxLengthOverDefault","maxLength","lengthDefault","buildOpeningTag","enclosingTag","isEditable","hasRichText","isOptional","buildFinalTag","tag","customText","updateFinalTag","preventDefault","TextEditor","setState","newTag","newText","newValue","console","log","renderTextLengthFields","renderEditableFields","LinkEditor","ImageEditor","TagDisplay","finalTag","dropdownSelection","newSelection","renderEditor","App","exact","path","TagEditor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d8fcf31.chunk.js","sourcesContent":["import '../../css/home/featureBubble.css'\nimport { Link } from 'react-router-dom'\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button'\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport React, { Component } from 'react';\n\nexport default class FeatureBubble extends Component {\n    render() {\n        return (\n            <Card className=\"featureBubble-card\">\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {this.props.title}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {this.props.desc}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Link to={this.props.linkPath}>\n                        <Button size=\"small\" color=\"primary\">\n                            Open\n                    </Button>\n                    </Link>\n                </CardActions>\n            </Card>\n        );\n    }\n}","import '../../css/home/featuresMenu.css'\nimport FeatureBubble from './featureBubble'\nimport React, { Component } from 'react';\n\nexport default class FeaturesMenu extends Component {\n    render() {\n        return (\n            <div id=\"featuresMenu-div\">\n                <FeatureBubble title=\"PM Tag Editor\" desc=\"Dynamically generate pm-ready tags for use in any project. Available for text, images and links.\" linkPath=\"/editor\" />\n            </div>\n        )\n    }\n}","import '../../css/home/home.css'\nimport FeaturesMenu from './featuresMenu'\nimport React, { Component } from 'react';\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div id=\"home-div\">\n                <p>This is the homepage - to be added</p>\n                <FeaturesMenu />\n            </div>\n        )\n    }\n}","import '../../css/tagEditor/leftDrawer.css'\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport TextFields from '@material-ui/icons/TextFields'\nimport LinkIcon from '@material-ui/icons/Link';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ImageIcon from '@material-ui/icons/Image';\nimport { List, Divider, ListItem, ListItemIcon, ListItemText } from '@material-ui/core'\n\n\nexport default class LeftDrawer extends Component {\n    render() {\n        return (\n            <div\n                className=\"leftDrawer-div\"\n                role=\"presentation\"\n                onClick={this.props.toggleDrawer(false)}\n            >\n                <List>\n                    <Link to='/'>\n                        <ListItem button key=\"Reserved for later\">\n                            <ListItemIcon>\n                                <HomeIcon />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Home\" />\n                        </ListItem>\n                    </Link>\n                </List>\n                <Divider />\n                <List>\n                    <ListItem onClick={() => this.props.updateDropdownSelection(\"text\")} button key=\"PM-Text\">\n                        <ListItemIcon>\n                            <TextFields />\n                        </ListItemIcon>\n                        <ListItemText primary=\"PM-Text\" />\n                    </ListItem>\n                    <ListItem onClick={() => this.props.updateDropdownSelection(\"link\")} button key=\"PM-Link\">\n                        <ListItemIcon>\n                            <LinkIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"PM-Link\" />\n                    </ListItem>\n                    <ListItem onClick={() => this.props.updateDropdownSelection(\"image\")} button key=\"Image editor\">\n                        <ListItemIcon>\n                            <ImageIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Image editor\" />\n                    </ListItem>\n                </List>\n\n            </div>\n        )\n    }\n}","// Imports\nimport React, { Component } from 'react';\nimport LeftDrawer from './leftDrawer'\nimport { AppBar, Toolbar, IconButton, Typography, SwipeableDrawer } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu';\n\n\nexport default class TopMenu extends Component {\n\n    render() {\n        return (\n            <div className=\"dropdown\" >\n                <AppBar position=\"static\">\n                    <Toolbar >\n                        <IconButton onClick={this.props.toggleDrawer(true)} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography type=\"title\" variant=\"h6\" style={{ flex: 1, textAlign: \"left\" }} >\n                            PMK 0.1\n                        </Typography>\n                        <SwipeableDrawer\n                            open={this.props.mainState.isDrawerOpen}\n                            onClose={this.props.toggleDrawer(false)}\n                            onOpen={this.props.toggleDrawer(true)}\n                        >\n                            <LeftDrawer\n                                updateDropdownSelection={this.props.updateDropdownSelection}\n                                toggleDrawer={this.props.toggleDrawer}\n                                topMenuState={this.state} />\n                        </SwipeableDrawer>\n                    </Toolbar>\n\n                </AppBar>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass AutoPopulateSelect extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"exampleForm.ControlSelect1\" className=\"editor-input-medium\">\n                <Form.Label>Auto-populate</Form.Label>\n                <Form.Control onChange={(e) => this.props.setAutoPopulateText(e.target.value)} as=\"select\" >\n                    <option>None</option>\n                    <option>Company Name</option>\n                    <option>Company Website</option>\n                    <option>Company Email</option>\n                    <option>Company Phone</option>\n                    <option>Company Address</option>\n                    <option>Value Proposition</option>\n                    <option>Link to LP</option>\n                </Form.Control>\n            </Form.Group>\n        )\n    }\n}\nexport default AutoPopulateSelect;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\n\nclass EnclosingTagSelect extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(event) => { this.props.setEnclosingTag(event.target.value) }} controlId=\"exampleForm.ControlSelect2\" className=\"editor-input-small\">\n                <Form.Label>Enclosing tag</Form.Label>\n                <Form.Control as=\"select\">\n                    <option>div</option>\n                    <option>p</option>\n                    <option>span</option>\n                </Form.Control>\n            </Form.Group>\n        )\n    }\n}\n\nexport default EnclosingTagSelect;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass TextContentInput extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"textContent\" className=\"editor-input-wide\">\n                <Form.Label>Text content</Form.Label>\n                <Form.Control onChange={(event) => { this.props.setCustomText(event.target.value) }} type=\"text\" placeholder=\"Enter the text which should be within the tag\" />\n            </Form.Group>\n        )\n    }\n}\n\nexport default TextContentInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass EditableCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"editableCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Editable\" onChange={() => {\n                    this.props.toggleEditable();\n                }} />\n            </Form.Group>\n        )\n    }\n}\n\nexport default EditableCheckbox;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass MaxLengthInput extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(e) => { this.props.setMaxLengthValue(e.target.value) }} controlId=\"maxLength\" className=\"editor-input-small\">\n                <Form.Label>Max length</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter\" />\n            </Form.Group>\n        )\n    }\n}\n\nexport default MaxLengthInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass LengthDefaultInput extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(e) => { this.props.setLengthDefaultValue(e.target.value) }} controlId=\"lengthDefault\" className=\"editor-input-small\">\n                <Form.Label>Length default</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter\" />\n            </Form.Group>\n        )\n    }\n}\n\nexport default LengthDefaultInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass PmTextInput extends Component {\n    render() {\n        return (\n            <Form.Group onChange={(event) => { this.props.setPmText(event.target.value) }} controlId=\"pmText\" className=\"editor-input-medium\">\n                <Form.Label>PM-Text</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter the unique pm-text attribute\" />\n            </Form.Group>\n        )\n    }\n}\nexport default PmTextInput;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass PreferMaxLengthCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"maxLengthCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Use max-length\" onChange={() => {\n                    this.props.toggleMaxLength()\n                }} />\n            </Form.Group>\n        )\n    }\n}\nexport default PreferMaxLengthCheckbox;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass OptionalCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"optionalCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Optional\" onChange={() => {\n                    this.props.toggleOptional();\n                }} />\n            </Form.Group>\n        )\n    }\n}\n\nexport default OptionalCheckbox;","import React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass RichTextCheckbox extends Component {\n    render() {\n        return (\n            <Form.Group controlId=\"richTextCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Rich Text\" onChange={() => {\n                    this.props.toggleRichText();\n                }} />\n            </Form.Group>\n        )\n    }\n}\n\nexport default RichTextCheckbox;","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nclass SubmitButton extends Component {\n\n    // Return a pm-text=\"\" tag with the relevant attribute value\n    buildAutoPopulatedPmText = () => {\n        let snippet = \" pm-text=\\\"\";\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Name\") {\n            snippet += \"companyname\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Website\") {\n            snippet += \"companyurl\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Email\") {\n            snippet += \"companyemail\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Phone\") {\n            snippet += \"companyphone\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Company Address\") {\n            snippet += \"companyaddress\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Value Proposition\") {\n            snippet += \"valueproposition\"\n        }\n        if (this.props.mainState.tagContent.autoPopulateText === \"Link to LP\") {\n            snippet += \"landingpage\"\n        }\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    // Return a pm-text=\"\" with the user-added attribute\n    buildManualPmText = () => {\n        let snippet = \" pm-text=\\\"\";\n        snippet += this.props.mainState.tagContent.pmText;\n        snippet += \"\\\"\"\n        return snippet;\n    }\n\n    buildLengthAttribute = () => {\n        if (this.props.mainState.preferMaxLengthOverDefault) {\n            return (\n                \" max-length=\\\"\" +\n                this.props.mainState.tagContent.maxLength +\n                \"\\\"\"\n            )\n        }\n        return (\n            \" length-default=\\\"+\" +\n            this.props.mainState.tagContent.lengthDefault +\n            \"\\\"\"\n        )\n    }\n\n    // Build the opening tag and its relevant attributes\n    buildOpeningTag = () => {\n        let snippet = \"<\";\n        snippet += this.props.mainState.tagContent.enclosingTag;\n        // If the pm-text is set to Auto Populate\n        if (this.props.mainState.tagContent.autoPopulateText) {\n            snippet += this.buildAutoPopulatedPmText();\n        }\n        // If the pm-text is NOT set to Auto Populate\n        if (!this.props.mainState.tagContent.autoPopulateText && this.props.mainState.tagContent.pmText) {\n            snippet += this.buildManualPmText();\n        }\n        // Add the editable attribute (if applicable)\n        if (this.props.mainState.isEditable) {\n            snippet += \" editable=\\\"true\\\"\";\n            // Add the rich text attribute (if applicable)\n            if (this.props.mainState.hasRichText) {\n                snippet += \" rich-text=\\\"true\\\"\";\n            }\n            snippet += this.buildLengthAttribute();\n        }\n        // Add the optional attribute (if applicable)\n        if (this.props.mainState.isOptional) {\n            snippet += \" optional=\\\"true\\\"\";\n        }\n        snippet += \">\"\n        return snippet;\n    }\n\n    // Build the final tag\n    buildFinalTag = () => {\n        let tag = this.buildOpeningTag();\n\n        // Text content\n        if (this.props.mainState.tagContent.customText !== null) {\n            tag += this.props.mainState.tagContent.customText;\n        }\n        // Closing tag\n        tag += \"</\" + this.props.mainState.tagContent.enclosingTag + \">\";\n        this.props.updateFinalTag(tag);\n    }\n\n    render() {\n        return (\n            <Button onClick={(e) => {\n                e.preventDefault();\n                this.buildFinalTag();\n            }} variant=\"contained\" color=\"primary\" type=\"submit\">\n                Generate\n            </Button>\n        )\n    }\n}\n\nexport default SubmitButton;","// Imports\nimport '../../../css/tagEditor/textEditor.css'\nimport React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\nimport AutoPopulateSelect from './autoPopulateSelect';\nimport EnclosingTagSelect from './enclosingTagSelect';\nimport TextContentInput from './textContentInput';\nimport EditableCheckbox from './editableCheckbox';\nimport MaxLengthInput from './maxLengthInput';\nimport LengthDefaultInput from './lengthDefaultInput';\nimport PmTextInput from './pmTextInput';\nimport PreferMaxLengthCheckbox from './preferMaxLengthCheckbox';\nimport OptionalCheckbox from './optionalCheckbox';\nimport RichTextCheckbox from './richTextCheckbox';\nimport SubmitButton from './submitButton';\n\nclass TextEditor extends Component {\n    state = {\n        isEditable: false,\n        isOptional: false,\n        hasRichText: false,\n        preferMaxLengthOverDefault: false,\n        tagContent: {\n            enclosingTag: \"div\",\n            autoPopulateText: null,\n            pmText: null,\n            customText: null,\n            maxLength: 0,\n            lengthDefault: 0,\n        },\n    }\n\n    // Toggle whether the user can insert 'max-length' or 'length-default'\n    toggleMaxLength = () => {\n        this.setState({ preferMaxLengthOverDefault: !this.state.preferMaxLengthOverDefault })\n    }\n\n    // Toggle whether the pm-tag is editable\n    toggleEditable = () => {\n        this.setState({ isEditable: !this.state.isEditable })\n    }\n\n    // Toggle whether the pm-tag is optional\n    toggleOptional = () => {\n        this.setState({ isOptional: !this.state.isOptional })\n    }\n\n    // Toggle whether the pm-tag has rich text\n    toggleRichText = () => {\n        this.setState({ hasRichText: !this.state.hasRichText })\n    }\n\n    // Change the element which encloses the text [p/div/span]\n    setEnclosingTag = (newTag) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.enclosingTag = newTag;\n        this.setState({ tagContent });\n    }\n\n    // Manually change the pm-text from the text input\n    setPmText = (newText) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.pmText = newText;\n        this.setState({ tagContent });\n    }\n\n    // Change the auto populated pm-text to the selection of the user\n    setAutoPopulateText = (newText) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.autoPopulateText = newText === \"None\" ? null : newText;\n        this.setState({ tagContent });\n    }\n\n    // Set the text content of the tag to the user input\n    setCustomText = (newText) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.customText = newText;\n        this.setState({ tagContent });\n    }\n\n    // Set the value of the attribute max-length\n    setMaxLengthValue = (newValue) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.maxLength = newValue;\n        this.setState({ tagContent });\n        console.log(newValue)\n    }\n\n    // Set the value of the attribute length-default\n    setLengthDefaultValue = (newValue) => {\n        let tagContent = { ...this.state.tagContent };\n        tagContent.lengthDefault = newValue;\n        this.setState({ tagContent });\n        console.log(newValue)\n    }\n\n    // Render the max-length or the length-default based on the boolean preferMaxLengthOverDefault\n    renderTextLengthFields = () => {\n        if (this.state.preferMaxLengthOverDefault) {\n            return <MaxLengthInput setMaxLengthValue={this.setMaxLengthValue} />\n        }\n        else {\n            return <LengthDefaultInput setLengthDefaultValue={this.setLengthDefaultValue} />\n        }\n    }\n\n    // Render the editable properties of the PM tags based on the boolean isEditable\n    renderEditableFields = () => {\n        if (this.state.isEditable) {\n            return (\n                <span>\n                    <PmTextInput setPmText={this.setPmText} />\n                    <PreferMaxLengthCheckbox toggleMaxLength={this.toggleMaxLength} />\n                    {this.renderTextLengthFields()}\n                    <OptionalCheckbox toggleOptional={this.toggleOptional} />\n                    <RichTextCheckbox toggleRichText={this.toggleRichText} />\n                </span>\n            )\n        }\n    }\n\n\n\n    render() {\n        return (\n            <div id=\"div-textEditor\" >\n                <p className=\"editor-h1\">\n                    Text editor\n                </p>\n                <Form>\n                    <AutoPopulateSelect setAutoPopulateText={this.setAutoPopulateText} />\n                    <EnclosingTagSelect setEnclosingTag={this.setEnclosingTag} />\n                    <TextContentInput setCustomText={this.setCustomText} />\n                    <EditableCheckbox toggleEditable={this.toggleEditable} />\n                    {this.renderEditableFields()}\n                    <SubmitButton mainState={this.state} updateFinalTag={this.props.updateFinalTag} />\n                </Form>\n            </div>\n        )\n    }\n}\nexport default TextEditor;","// Imports\nimport React, { Component } from 'react';\nimport '../../../css/tagEditor/linkEditor.css'\n\n\nclass LinkEditor extends Component {\n    render() {\n        return (\n            <div id=\"div-linkEditor\">\n                <p className=\"editor-h1\">\n                    Link editor\n                </p>\n                <p>Coming soon</p>\n            </div>\n        )\n    }\n}\nexport default LinkEditor;","// Imports\nimport React, { Component } from 'react';\nimport '../../../css/tagEditor/imageEditor.css'\n\nclass ImageEditor extends Component {\n    render() {\n        return (\n            <div id=\"div-imageEditor\">\n                <p className=\"editor-h1\">\n                    Image editor\n                </p>\n                <p>Coming soon</p>\n            </div>\n        )\n    }\n}\nexport default ImageEditor;","// Imports\nimport React, { Component } from 'react';\nimport '../../css/tagEditor/tagDisplay.css'\n\nclass TagDisplay extends Component {\n\n    render() {\n        return (\n            <div id=\"div-tagDisplay\">\n                <p className=\"tagDisplay-h1\">\n                    Result\n                </p>\n                <p className=\"tagDisplay-result\">\n                    {this.props.mainState.finalTag}\n                </p>\n            </div>\n        )\n    }\n}\nexport default TagDisplay;","// Imports\nimport React, { Component } from 'react';\nimport TopMenu from './topMenu';\nimport TextEditor from './textEditor/textEditor';\nimport LinkEditor from './linkEditor/linkEditor';\nimport ImageEditor from './imageEditor/imageEditor';\nimport TagDisplay from './tagDisplay';\nimport '../../css/tagEditor/tagEditor.css'\n\nclass Home extends Component {\n    state = {\n        isDrawerOpen: false,\n        dropdownSelection: \"text\",\n        finalTag: \"...\"\n    }\n\n    // Open or close the drawer\n    toggleDrawer = (open) => event => {\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n        this.setState({ isDrawerOpen: open })\n    }\n\n    // Switch the currently open editor [Image/Text/Link]\n    updateDropdownSelection = (newSelection) => {\n        this.setState({\n            dropdownSelection: newSelection\n        })\n    }\n\n    // Update the final tag\n    updateFinalTag = (newTag) => {\n        this.setState({\n            finalTag: newTag\n        })\n    }\n\n    // Render the relevant editor based on the value of the dropdown menu at the top\n    renderEditor = () => {\n        if (this.state.dropdownSelection === \"text\") {\n            return <TextEditor updateFinalTag={this.updateFinalTag} />\n        }\n        if (this.state.dropdownSelection === \"link\") {\n            return <LinkEditor />\n        }\n        if (this.state.dropdownSelection === \"image\") {\n            return <ImageEditor />\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"div-tagEditor\">\n                <TopMenu updateDropdownSelection={this.updateDropdownSelection} mainState={this.state} toggleDrawer={this.toggleDrawer}></TopMenu>\n                {this.renderEditor()}\n                <TagDisplay mainState={this.state} />\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Home from './components/home/home'\nimport TagEditor from './components/tagEditor/tagEditor'\nimport { Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/' component={Home} />\n        <Route path='/editor' component={TagEditor} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport {\n    BrowserRouter,\n} from 'react-router-dom';\n\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<BrowserRouter ><App /></BrowserRouter>, document.getElementById('root'));"],"sourceRoot":""}